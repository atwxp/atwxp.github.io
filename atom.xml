<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>武小盼uker的博客</title>
  <subtitle>coding my code,uku my ukulele</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://atwxp.github.io/"/>
  <updated>2017-04-11T04:10:42.000Z</updated>
  <id>https://atwxp.github.io/</id>
  
  <author>
    <name>武小盼uker</name>
    <email>wxp201013@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>弹性布局的实践</title>
    <link href="https://atwxp.github.io/2017/04/11/flex-study/"/>
    <id>https://atwxp.github.io/2017/04/11/flex-study/</id>
    <published>2017-04-11T04:05:21.000Z</published>
    <updated>2017-04-11T04:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>如下图所示的布局，红球区域有33个球，篮球区域有16个球，要求自适应页面且最边上的球必须紧靠区域边缘</p>
<p><img src="/assets/img/flex-study-001.png" alt="Alt text"></p>
<p><code>HTML</code> 结构</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ball-list"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1、float-inline-block-布局"><a href="#1、float-inline-block-布局" class="headerlink" title="1、float/inline-block 布局"></a>1、<code>float/inline-block</code> 布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ball</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">28px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">28px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">8px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/assets/img/flex-study-002.png" alt="Alt text"></p>
<p>右侧会存在空隙，因为一行放不下的时候，浏览器就会折行显示</p>
<h2 id="2、flex-布局"><a href="#2、flex-布局" class="headerlink" title="2、flex 布局"></a>2、<code>flex</code> 布局</h2><p>这种复杂又要求自适应宽度的布局，用 <code>flex</code> 再好不过了</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.ball-list</span> &#123;</div><div class="line">	<span class="attribute">display</span>: flex;</div><div class="line">	<span class="attribute">flex-wrap</span>: wrap;</div><div class="line">	<span class="attribute">justify-content</span>: space-between;</div><div class="line">	<span class="selector-class">.ball</span> &#123;</div><div class="line">		<span class="comment">// 兼容旧浏览器，子元素必须是块元素</span></div><div class="line">		<span class="attribute">display</span>: block;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="/assets/img/flex-study-003.png" alt="Alt text"></p>
<p>看样子不错的说，但是最后一行不尽人意</p>
<h2 id="3、flex-margin-auto-布局"><a href="#3、flex-margin-auto-布局" class="headerlink" title="3、flex + margin: auto 布局"></a>3、<code>flex + margin: auto</code> 布局</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">&amp;</span><span class="selector-class">.flexauto</span> &#123;</div><div class="line">    <span class="selector-class">.ball</span><span class="selector-pseudo">:last-child</span> &#123;</div><div class="line">      <span class="attribute">margin-right</span>: auto;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><img src="/assets/img/flex-study-004.png" alt="Alt text"></p>
<p>效果不错，但是不够好</p>
<h2 id="4、flex-js"><a href="#4、flex-js" class="headerlink" title="4、flex + js"></a>4、<code>flex + js</code></h2><p>尝试了前面几种方法，都不尽人意，看来纯粹使用 <code>css</code> 是行不通的，那只能使用 <code>js</code> 计算空出的占位符个数，手动填满这个区域</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="built_in">parseFloat</span>(<span class="built_in">window</span>.getComputedStyle(ballList).width);</div><div class="line"></div><div class="line"><span class="comment">// 33 是球的个数</span></div><div class="line"><span class="comment">// 8 是 margin-right</span></div><div class="line"><span class="comment">// 38 是球的宽度</span></div><div class="line"><span class="keyword">var</span> cols = <span class="built_in">Math</span>.floor((width + <span class="number">8</span>) / <span class="number">38</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> remainCols = cols - <span class="number">33</span> % cols;</div><div class="line"></div><div class="line"><span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; remainCols; i++) &#123;</div><div class="line">    <span class="keyword">var</span> itag = <span class="built_in">document</span>.createElement(<span class="string">'i'</span>);</div><div class="line"></div><div class="line">    itag.className = <span class="string">'ball'</span>;</div><div class="line"></div><div class="line">    fragment.appendChild(itag);</div><div class="line">&#125;</div><div class="line">  </div><div class="line">ballList.appendChild(fragment);</div></pre></td></tr></table></figure>
<p><img src="/assets/img/flex-study-005.png" alt="Alt text"></p>
<p>大功告成</p>
<h2 id="5、Demo"><a href="#5、Demo" class="headerlink" title="5、Demo"></a>5、Demo</h2><p>戳 <a href="http://output.jsbin.com/vexaseloku" target="_blank" rel="external">这里</a></p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如下图所示的布局，红球区域有33个球，篮球区域有16个球，要求自适应页面且最边上的球必须紧靠区域边缘&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/flex-study-001.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HTML&lt;/code&gt; 结构&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ball-list&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ball&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;ball&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>对 webpack hash 的理解</title>
    <link href="https://atwxp.github.io/2017/04/10/webpack-hash/"/>
    <id>https://atwxp.github.io/2017/04/10/webpack-hash/</id>
    <published>2017-04-10T11:45:31.000Z</published>
    <updated>2017-04-10T12:20:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、hash-amp-amp-chunkhash"><a href="#1、hash-amp-amp-chunkhash" class="headerlink" title="1、hash &amp;&amp; chunkhash"></a>1、hash &amp;&amp; chunkhash</h2><p><code>webpack</code> 提供了两种方式实现缓存</p>
<ul>
<li><p>一种是为所有的 <code>chunks</code> 打上同样的 <code>hash</code> ，即编译 <code>hash</code></p>
</li>
<li><p>一种是根据每个 <code>chunk</code>  的内容打上各自的 <code>hash</code>，即 <code>chunkhash</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">output: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'output'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span></div><div class="line">    <span class="comment">// or</span></div><div class="line">    <span class="comment">// filename: '[name].[chunkhash:4].js'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>下面是很常见的 <code>webpack</code> 配置：</p>
<ul>
<li><p>对 <code>js</code> 的 <code>[chunkhash]</code> 由 <code>webpack</code> 计算</p>
</li>
<li><p>图片/字体的 <code>[hash]</code> 由 <code>file-loader</code> 计算</p>
</li>
<li><p>提取的 <code>CSS</code> 的 <code>[contenthash]</code> 由 <code>extract-text-webpack-plugin</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// production</span></div><div class="line">output: &#123;  </div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[chunkhash:8].js'</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">module</span>: &#123;  </div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.(jpe?g|png|gif|svg)$/i</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                <span class="attr">limit</span>: <span class="number">1000</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'assets/imgs/[name].[hash:8].[ext]'</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.(woff2?|eot|ttf|otf)$/i</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                <span class="attr">limit</span>: <span class="number">10000</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'assets/fonts/[name].[hash:8].[ext]'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;,</div><div class="line"><span class="attr">plugins</span>: [  </div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].[contenthash:8].css'</span>)</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2、-不稳定的-chunkhash"><a href="#2、-不稳定的-chunkhash" class="headerlink" title="2、 不稳定的 chunkhash"></a>2、 不稳定的 <code>chunkhash</code></h2><p>编译 <code>hash</code> 是很稳定可信赖的，但是不能做持久化缓存；<code>chunkhash</code> 看样子是根据 <code>chunk</code> 内容改变 <code>hash</code> 的，但是也不一定可信</p>
<p>比如我们加上 <code>extract-text-webpack-plugin</code> 抽取 <code>css</code> 出来：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/src</div><div class="line">  |- pageA.js</div><div class="line">  |- pageA.css</div><div class="line"></div><div class="line"><span class="comment">// pageA.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./a.css'</span>);</div><div class="line"></div><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">output: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.[chunkhash:4].js'</span></div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [&#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>)</div><div class="line">    &#125;]</div><div class="line">&#125;,</div><div class="line">    </div><div class="line"><span class="attr">plugins</span>: [  </div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'[name].[contenthash:8].css'</span>)</div><div class="line">]</div></pre></td></tr></table></figure>
<p>修改 <code>pageA.css</code> 前后构建结果如下：</p>
<p><img src="/assets/img/webpack-hash-001.png" alt="Alt text"></p>
<p><code>pageA.js</code> 这个 <code>chunk</code> 的输出在 <code>webpack</code> 看来是包括 <code>css</code> 文件的，只不过被我们抽取出来罢了，所以改 <code>css</code> 也就改了这个 <code>chunk</code> 的内容</p>
<h2 id="3、-自定义-hash"><a href="#3、-自定义-hash" class="headerlink" title="3、 自定义 hash"></a>3、 自定义 hash</h2><p>解决这个问题可以使用 <a href="https://github.com/erm0l0v/webpack-md5-hash/" target="_blank" rel="external">webpack-md5-hash</a>：排序 <code>chunk</code> 的所有依赖模块，并将这些排序后的模块源代码拼接，最后用 <code>MD5</code> 拼接后内容的 <code>chunkhash</code></p>
<p>PS：为什么要排序呢？因为比如一个模块 <code>b</code> 先后引入了 <code>c, d</code>，后来我们换了位置变成了 <code>d, c</code> 实际内容没有变所以 <code>hash</code> 也不应该改变的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareMod</span>(<span class="params">modA, modB</span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> modAPath = getModFilePath(modA);</div><div class="line">   <span class="keyword">var</span> modBPath = getModFilePath(modB);</div><div class="line">   <span class="keyword">return</span> modAPath &gt; modBPath ? <span class="number">1</span> : modAPath &lt; modBPath ? <span class="number">-1</span> : <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getModSrc</span>(<span class="params">mod</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> mod._source &amp;&amp; mod._source._value || <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">compilation</span>) </span>&#123;</div><div class="line">   compilation.plugin(<span class="string">'chunk-hash'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk, chunkHash</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> source = chunk.modules.sort(compareMod).map(getModSrc).join(<span class="string">''</span>);</div><div class="line">       chunkHash.digest = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> md5(source);</div><div class="line">       &#125;;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这样就能解决前面修改 <code>ExtractTextPlugin</code> 的问题，但是依然存在问题</p>
<h2 id="4、发布版本不一致"><a href="#4、发布版本不一致" class="headerlink" title="4、发布版本不一致"></a>4、发布版本不一致</h2><p>有 <code>a.js, b.js, index.js</code> 如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>)</div><div class="line"><span class="keyword">var</span> a = <span class="number">1424</span>;</div><div class="line"></div><div class="line"><span class="comment">// b.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>)</div><div class="line"></div><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'common'</span>,</div><div class="line">    <span class="attr">minChunks</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">chunks</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>],</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>第一次编译：</p>
<p><img src="/assets/img/webpack-hash-002.png" alt="Alt text"></p>
<p>修改 <code>a.js</code> 再次编译：</p>
<p><img src="/assets/img/webpack-hash-003.png" alt="Alt text"></p>
<p>可以看见 <code>common.xx.js</code> 也跟着改变了，但是实际上我们仅仅修改了 <code>a.js</code> 不应该 <code>common.js</code> 也改变了才对</p>
<p>打开它的文件，发现这一段不一样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">"."</span> + &#123;<span class="string">"0"</span>:<span class="string">"81a79c6cc1fd236fb9ae"</span>,<span class="string">"1"</span>:<span class="string">"6a749561f8eb4005a925"</span>&#125;[chunkId] + <span class="string">".js"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 修改后</span></div><div class="line">script.src = __webpack_require__.p + <span class="string">""</span> + chunkId + <span class="string">"."</span> + &#123;<span class="string">"0"</span>:<span class="string">"81a79c6cc1fd236fb9ae"</span>,<span class="string">"1"</span>:<span class="string">"9ce6f42793d52c747c1a"</span>&#125;[chunkId] + <span class="string">".js"</span>;</div></pre></td></tr></table></figure>
<p>这个可以在 <code>webpack</code> 源码中找到原因，为什么 <code>common.xx.js</code> 的 <code>hash</code> 也发生变化了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// compilation.js</span></div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; chunks.length; i++) &#123;</div><div class="line">    chunk = chunks[i];</div><div class="line">    <span class="keyword">var</span> chunkHash = <span class="built_in">require</span>(<span class="string">"crypto"</span>).createHash(hashFunction);</div><div class="line"></div><div class="line">    <span class="comment">// 根据chunk内容生成 chunkhash</span></div><div class="line">    chunk.updateHash(chunkHash);</div><div class="line">    <span class="comment">// 这两句话用来生成要加密的信息</span></div><div class="line">    <span class="comment">// 对于入口文件，走的是 chunkTemplate</span></div><div class="line">    <span class="comment">// 对抽取的公共文件如上文的 common.js, 走的是 mainTemplate</span></div><div class="line">    <span class="keyword">if</span> (chunk.entry) &#123;</div><div class="line">        <span class="keyword">this</span>.mainTemplate.updateHashForChunk(chunkHash, chunk);</div><div class="line">	&#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.chunkTemplate.updateHashForChunk(chunkHash);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// webpack-md5-plugin 就是在 chunk-hash 触发的</span></div><div class="line">    <span class="keyword">this</span>.applyPlugins(<span class="string">"chunk-hash"</span>, chunk, chunkHash);</div><div class="line"></div><div class="line">    chunk.hash = chunkHash.digest(hashDigest);</div><div class="line"></div><div class="line">    hash.update(chunk.hash);</div><div class="line">&#125;</div><div class="line"></div><div class="line">mainTemplate.plugin(<span class="string">"hash-for-chunk"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">hash, chunk</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> outputOptions = <span class="keyword">this</span>.outputOptions;</div><div class="line">    <span class="keyword">var</span> chunkFilename = outputOptions.chunkFilename || outputOptions.filename;</div><div class="line"></div><div class="line">    <span class="comment">// 这里会输出chunk、chunkhash对应的关系，拿上文的例子来说：</span></div><div class="line">    <span class="comment">// getChunkMaps() 得到一个对象</span></div><div class="line">    <span class="comment">// &#123;</span></div><div class="line">    <span class="comment">//     hash: &#123;</span></div><div class="line">    <span class="comment">//         0: 81a79c6cc1fd236fb9ae,</span></div><div class="line">    <span class="comment">//         1: 9ce6f42793d52c747c1a</span></div><div class="line">    <span class="comment">//     &#125;,</span></div><div class="line">    <span class="comment">//     name: &#123;</span></div><div class="line">    <span class="comment">//         0: 'a',</span></div><div class="line">    <span class="comment">//         1: 'b'</span></div><div class="line">    <span class="comment">//     &#125;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// 因为我们修改了 a.js 内容发生变化，所以 hash 发生变化，从而上面的对象发生变化，所以 common.js 内容改变 hash 也因此变化</span></div><div class="line">    <span class="keyword">if</span>(REGEXP_CHUNKHASH_FOR_TEST.test(chunkFilename))</div><div class="line">        hash.update(<span class="built_in">JSON</span>.stringify(chunk.getChunkMaps(<span class="literal">true</span>, <span class="literal">true</span>).hash));</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(REGEXP_NAME_FOR_TEST.test(chunkFilename))</div><div class="line">        hash.update(<span class="built_in">JSON</span>.stringify(chunk.getChunkMaps(<span class="literal">true</span>, <span class="literal">true</span>).name));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>通过这个源码可以知道在生成 <code>chunkhash</code> 的过程中，<code>common.js</code> 依赖 <code>chunk</code> 的 <code>hash</code> 值，这里的例子就是 <code>a.js, b.js</code>，因为修改了 <code>a.js</code> 导致其 <code>chunkhash</code> 变化，从而导致 <code>common.js</code> 内容变化从而其 <code>hash</code> 变化，但是 <code>common.js</code> 的本质内容并没有发生变化</p>
<p>在使用前面的自定义 <code>hash</code> 插件重复上述操作之后，效果如下：</p>
<p><img src="/assets/img/webpack-hash-004.png" alt="Alt text"></p>
<p>看样子 <code>hash</code> 是没有变化了，但是当我们打开 <code>common.js</code> 会发现内容是发生变化的：</p>
<p><img src="/assets/img/webpack-hash-005.png" alt="Alt text"></p>
<p>但我们的 <code>chunkhash</code> 并没有改变，这就导致 <code>common.js</code> 可能不能上传到线上，导致线上的 <code>common.js</code> 版本依然是旧的，这样就会出错</p>
<h2 id="5、解决方法"><a href="#5、解决方法" class="headerlink" title="5、解决方法"></a>5、解决方法</h2><h2 id="6、调试-webpack"><a href="#6、调试-webpack" class="headerlink" title="6、调试 webpack"></a>6、调试 webpack</h2><ul>
<li><p>下载 <code>webstorm</code> </p>
</li>
<li><p>全局/项目安装 <code>npm install webpack-webstorm-debugger-script -g/--save-dev</code></p>
</li>
<li><p>配置 <code>webstorm</code></p>
</li>
</ul>
<p><img src="/assets/img/webpack-hash-007.png" alt="Alt text"></p>
<h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><ul>
<li><a href="https://github.com/zhenyong/Blog/issues/1" target="_blank" rel="external">你用 webpack 1.x 输出的 hash 靠谱不</a></li>
<li><a href="https://sebastianblade.com/using-webpack-to-achieve-long-term-cache/" target="_blank" rel="external">用 webpack 实现持久化缓存</a></li>
<li><a href="https://lihuanghe.github.io/2016/05/30/webpack-event.html" target="_blank" rel="external">webpack 源码分析</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI2NzExNTczMw==&amp;mid=2653284910&amp;idx=1&amp;sn=77f0675205bcb2265745b377a2c331d5&amp;key=18e81ac7415f67c418b948acc5b6451858d3cb10a88c3627d82ddb8cdd4002391c24f5d91c9a0ce7c832edd4d6789982&amp;ascene=4&amp;uin=MjIzNzU4MjAw&amp;devicetype=iPhone+OS9.3.2&amp;version=16031312&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=LMn24789re7A38N05l0uGSnLLAlBnEFoJ10B/eQLhR0=" target="_blank" rel="external">如何十倍提升你的 webpack 构建效率</a></li>
<li><a href="https://webpack.github.io/docs/long-term-caching.html" target="_blank" rel="external">long term caching webpack1</a></li>
<li><a href="https://webpack.js.org/guides/caching/#generating-unique-hashes-for-each-file" target="_blank" rel="external">cache webpack2</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、hash-amp-amp-chunkhash&quot;&gt;&lt;a href=&quot;#1、hash-amp-amp-chunkhash&quot; class=&quot;headerlink&quot; title=&quot;1、hash &amp;amp;&amp;amp; chunkhash&quot;&gt;&lt;/a&gt;1、hash &amp;amp;&amp;amp; chunkhash&lt;/h2&gt;&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt; 提供了两种方式实现缓存&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一种是为所有的 &lt;code&gt;chunks&lt;/code&gt; 打上同样的 &lt;code&gt;hash&lt;/code&gt; ，即编译 &lt;code&gt;hash&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一种是根据每个 &lt;code&gt;chunk&lt;/code&gt;  的内容打上各自的 &lt;code&gt;hash&lt;/code&gt;，即 &lt;code&gt;chunkhash&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;output&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;filename&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;[name].[hash].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// or&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// filename: &#39;[name].[chunkhash:4].js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="构建工具" scheme="https://atwxp.github.io/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>响应式图片精灵实现</title>
    <link href="https://atwxp.github.io/2017/04/10/responsive-image/"/>
    <id>https://atwxp.github.io/2017/04/10/responsive-image/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在优化图片的时候，有一个分享功能，点击会弹出分享浮层，里面有各类社交 <code>logo</code> 如 <code>QQ</code>，微信，微博等，这些 <code>logo</code> 图片都是各自加载的，现在希望能做一张精灵图减少 <code>HTTP</code> 请求，样式如下图：</p>
<p><img src="/assets/img/sms.png" alt="Alt text"></p>
<p>遇到的问题就是怎么能自适应的设置图片大小以及位置</p>
<a id="more"></a>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>首先我们有一个放置背景图片的容器，通过 <code>CSS</code> 把它写成<strong>正方形</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;sprite&quot;&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">div.sprite &#123;</div><div class="line">    width: 20%;</div><div class="line">    height: 0;</div><div class="line">    padding-bottom: 20%;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>假设我们的精灵图是 <code>1000*500px</code>，左边是 <code>500px</code> 宽的第一张图，右边是第二张图，假设我们这样写：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.sprite</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">./sprite.png</span>);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们会发现这张图会自动缩放在容器里，不是我们想要的容器内只显示一张图的效果。</p>
<p>实际上我们希望显示这张精灵图的一半大小，那么我们可以设置 <code>background-size: 200%</code>，这句话会设置精灵图的宽度为两个容器宽度的大小，又因为精灵图本身的两张图宽度比例是 <code>1:1</code> 的，所以每个图的宽度都是容器宽度<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.sprite</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20%</span>;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">'./sprite.png'</span>);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">200%</span>;</div><div class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>响应式的关键是 <strong>使用百分比设置图片的位置</strong></p>
<p>拿项目本身来说，每个 <code>logo</code> 容器都是正方形，精灵图是 <code>4 * 2</code> 的，且每个都是 <code>198*198</code> 即也是正方形，怎么实现呢？<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo</span> &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">./sms.png</span>);</div><div class="line">    <span class="attribute">background-size</span>: <span class="number">400%</span> <span class="number">200%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>水平宽度写 <code>400%</code> 即是容器宽度的 4 倍大小，精灵图本身宽度是4个logo，所以每个logo在宽度上刚好占满容器宽度；高度同理</p>
<p>微信、微博、空间、邮件这几个很好设置图片位置<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wx</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.weibo</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.qzone</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.email</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么中间的怎么设置位置呢？我是这么理解，既然每个 <code>logo</code> 和容器大小是一样的，位置又是通过百分比来设置，那么假设 <code>w</code> 是容器宽度，<code>m</code> 表示精灵图有 <code>m</code> 列，第一排第  <code>n</code> 列 <code>logo</code> 的位置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">percent * w * m - percent * w = (n - <span class="number">1</span>) * w</div></pre></td></tr></table></figure></p>
<p>即设置第一个 <code>logo</code> 百分比是 0，第二个是  <code>1/3</code> 第三个是 <code>2/3</code> 第四个是  <code>3/3</code></p>
<h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><ul>
<li><a href="http://brianjohnsondesign.com/responsive-background-image-sprites-css-tutorial/" target="_blank" rel="external">responsive-background-image-sprites-css-tutorial</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在优化图片的时候，有一个分享功能，点击会弹出分享浮层，里面有各类社交 &lt;code&gt;logo&lt;/code&gt; 如 &lt;code&gt;QQ&lt;/code&gt;，微信，微博等，这些 &lt;code&gt;logo&lt;/code&gt; 图片都是各自加载的，现在希望能做一张精灵图减少 &lt;code&gt;HTTP&lt;/code&gt; 请求，样式如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/sms.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
&lt;p&gt;遇到的问题就是怎么能自适应的设置图片大小以及位置&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>CSS计数器的使用</title>
    <link href="https://atwxp.github.io/2017/04/10/css-counter/"/>
    <id>https://atwxp.github.io/2017/04/10/css-counter/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>类似这样的列表，前面的序号可以使用 <code>CSS Counter</code> 来实现：</p>
<p><img src="/assets/img/list-counter.png" alt=""></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list</span> &#123;</div><div class="line">	<span class="attribute">counter-reset</span>: index;</div><div class="line">	</div><div class="line">	<span class="attribute">.item</span>::before &#123;</div><div class="line">		counter-increment: index;</div><div class="line">		<span class="attribute">content</span>: <span class="built_in">counter</span>(index);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不想对某个元素生成计数器，有两个方法：</p>
<ul>
<li><p>display: none</p>
</li>
<li><p>无法正常生成内容的伪元素</p>
</li>
</ul>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>1、减少 <code>HTML</code> 结构，不用多写一个 <code>span</code> 等标签来包裹它<br>2、在某些情况下，涉及动态删除、添加列表等情况下，那么列表顺序会被打乱，不能自动排序，需要在js中动态实现；如果使用 <code>css</code> 的话，我们只需要专心实现<code>dom</code> 的增删即可<br>3、一般这种序号都属于样式修饰，能做到与 <code>HTML</code> 分离自然是很好的</p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h2&gt;&lt;p&gt;类似这样的列表，前面的序号可以使用 &lt;code&gt;CSS Counter&lt;/code&gt; 来实现：&lt;/p&gt;
&lt;p&gt;&lt;img sr
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>background-clip 的 bug</title>
    <link href="https://atwxp.github.io/2017/04/10/background-clip/"/>
    <id>https://atwxp.github.io/2017/04/10/background-clip/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>同时设置 <code>border-radius</code> &amp; <code>background</code> &amp; <code>border-color</code> &amp; <code>background-clip</code> 在 <code>Android 4.1.1</code> 上有 <code>bug</code><br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">position</span>: absolute;</div><div class="line"><span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line"><span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line"><span class="attribute">margin-top</span>: -<span class="number">37px</span>;</div><div class="line"><span class="attribute">margin-left</span>: -<span class="number">37px</span>;</div><div class="line"><span class="attribute">width</span>: <span class="number">66px</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">66px</span>;</div><div class="line"></div><div class="line"><span class="comment">// border: 4px solid rgba(255, 255, 255, 0.5);</span></div><div class="line"><span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#f00</span>;</div><div class="line"><span class="attribute">background</span>: <span class="number">#fafafa</span>;</div><div class="line"><span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line"><span class="attribute">-webkit-background-clip</span>: content-box;</div><div class="line"><span class="attribute">background-clip</span>: content-box;</div><div class="line"></div><div class="line"><span class="attribute">text-align</span>: center;</div><div class="line"><span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line"><span class="attribute">z-index</span>: <span class="number">1</span>;</div></pre></td></tr></table></figure></p>
<p>设置 <code>border</code> 不是透明色，表现的和预期一样：</p>
<p><img src="/assets/img/bgclip-normal.png" alt="Alt text"></p>
<p>如果设置为透明色，就会这样：</p>
<p><img src="/assets/img/bgclip-error.png" alt="Alt text"></p>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://css-tricks.com/the-backgound-clip-property-and-use-cases/" target="_blank" rel="external">the-backgound-clip-property-and-use-cases</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同时设置 &lt;code&gt;border-radius&lt;/code&gt; &amp;amp; &lt;code&gt;background&lt;/code&gt; &amp;amp; &lt;code&gt;border-color&lt;/code&gt; &amp;amp; &lt;code&gt;background-clip&lt;/code&gt; 在 &lt;code&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>iscroll 的坑</title>
    <link href="https://atwxp.github.io/2017/04/10/iscroll/"/>
    <id>https://atwxp.github.io/2017/04/10/iscroll/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给 <code>iscroll</code> 的子元素绑定 <code>click</code> 事件，在 猎豹，<code>chrome</code>, <code>UC</code> 等失效</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>后来查阅 <a href="https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/basicfeatures.html" target="_blank" rel="external">文档</a> 发现已经提示我们了</p>
<blockquote>
<p><code>options.click</code><br>为了重写原生滚动条，<code>iScroll</code> 禁止了一些默认的浏览器行为，比如鼠标的点击。如果你想你的应用程序响应 <code>click</code> 事件，那么该设置次属性为 <code>true</code> 。请注意，建议使用自定义的 <code>tap</code> 事件来代替它（见下面）。<br>默认属性：<code>false</code></p>
<p><code>options.tap</code><br>设置此属性为 <code>true</code>，当滚动区域被点击或者触摸但并没有滚动时，可以让 <code>iScroll</code> 抛出一个自定义的tap事件。<br>这是处理与可以点击元素之间的用户交互的建议方式。侦听 <code>tap</code> 事件和侦听标准事件的方式一致。示例如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">element.addEventListener(<span class="string">'tap'</span>, doSomething, <span class="literal">false</span>); \\ Native</div><div class="line">$(<span class="string">'#element'</span>).on(<span class="string">'tap'</span>, doSomething); \\ jQuery</div></pre></td></tr></table></figure></p>
<p>你可以通过传递一个字符串来自定义事件名称。比如：<br>tap: ‘myCustomTapEvent’<br>在这个示例里你应该侦听名为myCustomTapEvent的事件。<br>默认值：false</p>
</blockquote>
<a id="more"></a>
<p>在源码中可以找到实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">_initEvents: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="comment">// 注册 click</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">this</span>.options.click ) &#123;</div><div class="line">           eventType(<span class="keyword">this</span>.wrapper, <span class="string">'click'</span>, <span class="keyword">this</span>, <span class="literal">true</span>);</div><div class="line">       &#125;</div><div class="line">	...</div><div class="line">	<span class="comment">// 注册移动端事件</span></div><div class="line">	<span class="keyword">if</span> ( utils.hasTouch &amp;&amp; !<span class="keyword">this</span>.options.disableTouch ) &#123;</div><div class="line">           eventType(<span class="keyword">this</span>.wrapper, <span class="string">'touchstart'</span>, <span class="keyword">this</span>);</div><div class="line">           eventType(target, <span class="string">'touchmove'</span>, <span class="keyword">this</span>);</div><div class="line">           eventType(target, <span class="string">'touchcancel'</span>, <span class="keyword">this</span>);</div><div class="line">           eventType(target, <span class="string">'touchend'</span>, <span class="keyword">this</span>);</div><div class="line">       &#125;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">_start: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="comment">// 在 touchstart 阻止浏览器触摸行为，且禁用页面滚动</span></div><div class="line">	<span class="comment">// preventDefaultException: &#123; tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ &#125;,</span></div><div class="line">	<span class="comment">// 这里没有 `a` 标签，所以点击带有 `href` 的 `a` 标签也会失效</span></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">this</span>.options.preventDefault &amp;&amp; !utils.isBadAndroid &amp;&amp; !utils.preventDefaultException(e.target, <span class="keyword">this</span>.options.preventDefaultException) ) &#123;</div><div class="line">           e.preventDefault();</div><div class="line">       &#125;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">_end: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="comment">// we scrolled less than 10 pixels</span></div><div class="line">       <span class="keyword">if</span> ( !<span class="keyword">this</span>.moved ) &#123;</div><div class="line">		<span class="comment">// 触发 tap 事件</span></div><div class="line">           <span class="keyword">if</span> ( <span class="keyword">this</span>.options.tap ) &#123;</div><div class="line">               utils.tap(e, <span class="keyword">this</span>.options.tap);</div><div class="line">           &#125;</div><div class="line">		<span class="comment">// 开启 click，使用自定义事件派发 click</span></div><div class="line">           <span class="keyword">if</span> ( <span class="keyword">this</span>.options.click ) &#123;</div><div class="line">               utils.click(e);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">this</span>._execEvent(<span class="string">'scrollCancel'</span>);</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// addEventListener() a special function called handleEvent to catch any events</span></div><div class="line">handleEvent: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	...		</div><div class="line">	case <span class="string">'touchstart'</span>:</div><div class="line">		<span class="keyword">this</span>._start(e);</div><div class="line">	<span class="keyword">case</span> <span class="string">'click'</span>:</div><div class="line">		<span class="keyword">if</span> ( !e._constructed ) &#123;</div><div class="line">               e.preventDefault();</div><div class="line">               e.stopPropagation();</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// utils.click</span></div><div class="line">   me.click = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> target = e.target,</div><div class="line">           ev;</div><div class="line">       <span class="keyword">if</span> ( !(<span class="regexp">/(SELECT|INPUT|TEXTAREA)/i</span>).test(target.tagName) ) &#123;</div><div class="line">           ev = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</div><div class="line">           ev.initMouseEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">true</span>, e.view, <span class="number">1</span>,</div><div class="line">               target.screenX, target.screenY, target.clientX, target.clientY,</div><div class="line">               e.ctrlKey, e.altKey, e.shiftKey, e.metaKey,</div><div class="line">               <span class="number">0</span>, <span class="literal">null</span>);</div><div class="line">           ev._constructed = <span class="literal">true</span>;</div><div class="line">           target.dispatchEvent(ev);</div><div class="line">       &#125;</div><div class="line">   &#125;;</div></pre></td></tr></table></figure></p>
<h2 id="配置方案"><a href="#配置方案" class="headerlink" title="配置方案"></a>配置方案</h2><p>1、开启 <code>click</code> 配置<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myScroll = <span class="keyword">new</span> IScroll(<span class="string">'#wrapper'</span>, &#123;</div><div class="line">	<span class="attr">mouseWheel</span>: <span class="literal">true</span>,</div><div class="line">       <span class="attr">click</span>: <span class="literal">true</span></div><div class="line">   &#125;);</div><div class="line"><span class="built_in">document</span>.document.querySelector(<span class="string">'#wrapper'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>带有 <code>href</code> 的 <code>a</code> 可以点击</li>
<li>不会有 300ms 延迟，在 <code>touchend</code> 触发的</li>
<li>不会冒泡，被 <code>e._constructed</code> 禁用了</li>
</ul>
<p>2、开启 <code>tap</code> 配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">myScroll = new IScroll(&apos;#wrapper&apos;, &#123;</div><div class="line">	mouseWheel: true,</div><div class="line">       tap: true</div><div class="line">   &#125;);</div><div class="line">document.document.querySelector(&apos;#wrapper&apos;).addEventListener(&apos;tap&apos;, function () &#123;&#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>带有 <code>href</code> 的 <code>a</code> 还是点击不了</li>
</ul>
<p>3、和 <code>zepto</code> 使用</p>
<p>如果是使用 <code>$(&#39;&#39;).on(&#39;click&#39;)</code> 和 原生的 <code>addEventListener</code> 没有差别，这个时候需要开启 <code>click: true</code></p>
<p>如果是使用 <code>$(&#39;&#39;).on(&#39;tap&#39;)</code>，配置 <code>click: false, tap: false</code> 就好了；如果配置了 <code>tap</code> 反而会触发两次 <code>tap</code> 事件</p>
<p>4、 <code>fastclick</code> 使用</p>
<p>配置 <code>click: false, tap: false</code>，某些安卓机（三星）绑定 <code>click</code> 还是点不了</p>
<p>配置 <code>click: true</code>，<code>IOS</code> 点击不了（双击好像可以），三星反而能点击了</p>
<p>5、 <code>zepto, fastclick</code> 使用</p>
<p>配置 <code>click: false, tap: false</code>，使用 <code>$(&#39;&#39;).on(&#39;click&#39;)</code> 在某些安卓机不能点，开启 <code>click: true</code>，<code>IOS</code> 反而不能点</p>
<p>配置 <code>click: false, tap: false</code>，使用 <code>$(&#39;&#39;).on(&#39;tap&#39;)</code> 好像没啥问题；如果配置了 <code>tap: true</code> 反而会触发两次 <code>tap</code> 事件</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>测试机型有限，也不知道还有哪些坑（使用了 <code>fastlick</code> 好晕）。综上，如果使用 <code>iscroll</code> 想要监听内部元素的点击事件：</p>
<ul>
<li>无论有没有 <code>fastclick</code>，使用 <code>zepto(&#39;&#39;).on(&#39;tap&#39;）</code> 应该是保险的；</li>
<li>或者开启 <code>tap: true</code> 配合原生的 <code>addEventListener(tap)</code></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;给 &lt;code&gt;iscroll&lt;/code&gt; 的子元素绑定 &lt;code&gt;click&lt;/code&gt; 事件，在 猎豹，&lt;code&gt;chrome&lt;/code&gt;, &lt;code&gt;UC&lt;/code&gt; 等失效&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;后来查阅 &lt;a href=&quot;https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/basicfeatures.html&quot;&gt;文档&lt;/a&gt; 发现已经提示我们了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;options.click&lt;/code&gt;&lt;br&gt;为了重写原生滚动条，&lt;code&gt;iScroll&lt;/code&gt; 禁止了一些默认的浏览器行为，比如鼠标的点击。如果你想你的应用程序响应 &lt;code&gt;click&lt;/code&gt; 事件，那么该设置次属性为 &lt;code&gt;true&lt;/code&gt; 。请注意，建议使用自定义的 &lt;code&gt;tap&lt;/code&gt; 事件来代替它（见下面）。&lt;br&gt;默认属性：&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;options.tap&lt;/code&gt;&lt;br&gt;设置此属性为 &lt;code&gt;true&lt;/code&gt;，当滚动区域被点击或者触摸但并没有滚动时，可以让 &lt;code&gt;iScroll&lt;/code&gt; 抛出一个自定义的tap事件。&lt;br&gt;这是处理与可以点击元素之间的用户交互的建议方式。侦听 &lt;code&gt;tap&lt;/code&gt; 事件和侦听标准事件的方式一致。示例如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;element.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;tap&#39;&lt;/span&gt;, doSomething, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;); \\ Native&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#element&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;tap&#39;&lt;/span&gt;, doSomething); \\ jQuery&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你可以通过传递一个字符串来自定义事件名称。比如：&lt;br&gt;tap: ‘myCustomTapEvent’&lt;br&gt;在这个示例里你应该侦听名为myCustomTapEvent的事件。&lt;br&gt;默认值：false&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Image On Retina</title>
    <link href="https://atwxp.github.io/2017/04/10/image-on-retina/"/>
    <id>https://atwxp.github.io/2017/04/10/image-on-retina/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>所谓“Retina”是一种显示技术，可以将把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度。          —— 百度百科</p>
</blockquote>
<h2 id="1、device-pixel"><a href="#1、device-pixel" class="headerlink" title="1、device pixel"></a>1、device pixel</h2><p><code>device pixel/physical pixel</code>，即 <strong>设备像素/物理像素</strong>。我们近距离观察显示器屏幕，可以看到很多个点紧紧排在一起，这些点就是物理像素点，每个点都有自己的颜色和亮度。</p>
<p>一般可以通过 <code>screen.width/screen.height</code> 获取设备像素（在 <code>PC</code> 上就是电脑屏幕大小，当然这个值我们不 care）</p>
<p>屏幕密度，即屏幕上存在的像素数量，通常用 <code>PPI</code> 来衡量，即 <code>pixels per inch</code>，每英寸的像素数。</p>
<p>拿 <code>MX3</code> 来说，分辨率 <code>1800 * 1080</code>，尺寸 <code>5.1寸</code>，它的 <code>PPI</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 411ppi</span></div><div class="line">PPI = <span class="built_in">Math</span>.sqrt(<span class="number">1080</span> * <span class="number">1080</span> + <span class="number">1800</span> * <span class="number">1800</span>) / <span class="number">5.1</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2、-css-pixel"><a href="#2、-css-pixel" class="headerlink" title="2、 css pixel"></a>2、 css pixel</h2><p>css 像素是一个相对单位，浏览器用它来渲染页面内容。通常情况下，css像素被称为 <code>device-independent pixels(DIPs)</code>。</p>
<p>在一个标准显示密度下，1个css像素对应1个屏幕像素。这对应于 <code>PC</code> 端的开发，设计图是多少像素，开发的时候就写多少像素。但是在移动端，事情变得有些复杂，涉及到 <code>devicePixelRatio</code> 的概念。</p>
<h2 id="3、-关系"><a href="#3、-关系" class="headerlink" title="3、 关系"></a>3、 关系</h2><p><code>css pixel</code> 用来实现页面布局，定义每个元素的位置大小，然后设备则把 <code>css pixel</code> 转为 <code>device pixel</code>。</p>
<p>如定义一个 <code>200*300</code> 的盒子，在普通屏下，显示大小为 <code>200 * 300</code>；但是在 <code>retina</code> 屏幕下(假设设备像素比是2)，保证同样的尺寸大小，<code>retina</code> 渲染的像素点就是普通屏的4倍即 <code>400*600</code></p>
<h2 id="4、devicePixelRatio"><a href="#4、devicePixelRatio" class="headerlink" title="4、devicePixelRatio"></a>4、devicePixelRatio</h2><p>前面提到了一个概念 <strong>设备像素比</strong>，定义如下：</p>
<blockquote>
<p>devicePixelRatio is the ratio between physical pixels and device-independent pixels (dips) on the device.      - quirksmode</p>
</blockquote>
<p><code>window.devicePixelRatio</code> 可以获取设备像素比，一般都比较靠谱。其他两个值 <code>physical pixel、dips</code> 就比较复杂了。</p>
<h2 id="5、dips"><a href="#5、dips" class="headerlink" title="5、dips"></a>5、dips</h2><ul>
<li>给页面设置 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></li>
<li>读取 <code>document.documentElement.clientWidth</code></li>
</ul>
<p>大多浏览器获取到的是 <code>layout viewport</code> 的宽度，也是 <code>dips</code> 的大小</p>
<p>PS：<code>IOS</code> 下，<code>screen.width</code> 返回 <code>dips</code></p>
<h2 id="6、physic-pixel"><a href="#6、physic-pixel" class="headerlink" title="6、physic pixel"></a>6、physic pixel</h2><ul>
<li>设置页面 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</code></li>
<li>分别读取 <code>screen.width, window.innerWidth, document.documentElement.clientWidth</code></li>
</ul>
<p>在 <code>MX3</code> 下测试，只有 <code>screen.width</code> 返回的是 <code>physical pixel</code>。</p>
<p><a href="http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html" target="_blank" rel="external">More about devicePixelRatio</a> 这篇文章总结到：</p>
<ul>
<li><code>window.devicePixelRatio</code> 基本上浏览器都支持，数据可靠</li>
<li>对于 <code>IOS</code> 设备，获取 <code>scree.width</code> 得到 <code>dips</code>， 然后乘上 <code>window.devicePixelRatio</code> 得到 <code>physical pixel</code></li>
<li>对于安卓设备，读取 <code>screen.width</code> 得到 <code>physical pixel</code>，然后除以 <code>window.devicePixelRatio</code> 得到 <code>dips</code></li>
</ul>
<p>关于 <code>devicePixelRatio</code> 的用法，参考这篇 <a href="https://atwxp.github.io/2017/03/16/media-query/">wiki</a></p>
<h2 id="7、retina-屏幕下的图片适配"><a href="#7、retina-屏幕下的图片适配" class="headerlink" title="7、retina 屏幕下的图片适配"></a>7、retina 屏幕下的图片适配</h2><h3 id="Bitmap-Pixels"><a href="#Bitmap-Pixels" class="headerlink" title="Bitmap Pixels"></a>Bitmap Pixels</h3><p>位图像素是栅格图像中最小的数据单位，每个像素包含着它的位置信息、颜色、透明度。</p>
<p>和分辨率无关，web上的图像都有一个抽象的大小，是通过 css 定义的，浏览器会根据 css 定义的大小渲染图片。</p>
<p>其实和前面的盒子说到的问题一样，如果我们定义一张图 <code>200*300</code> 大小，在 <code>retina</code> 下为了保持同等尺寸大小，因为 <code>retina</code> 相比普通屏多了一倍像素，就是说现在要用4倍的像素量填充图片的大小，但是因为位图像素不能被分割，这样就会取就近色进行填充，导致图片失真。</p>
<h3 id="图片适配"><a href="#图片适配" class="headerlink" title="图片适配"></a>图片适配</h3><p>为了适应 retina 高清屏，我们需要一份 <code>@2x</code> 的图片，在 css 这样写：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.icon</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(example@2x.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</div><div class="line">	<span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有时候我们会需要适配不同设备像素比，就要用到 <a href="https://atwxp.github.io/2017/03/16/media-query/">media query</a> 了</p>
 <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.icon</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="built_in">url</span>(example.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</div><div class="line">	<span class="attribute">background-size</span>: <span class="number">20px</span> <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio: <span class="number">3</span>)&#123;</div><div class="line">	<span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">example</span>@<span class="keyword">3x</span>.<span class="keyword">png</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="http://www.smashingmagazine.com/2012/08/towards-retina-web/" target="_blank" rel="external">Towards A Retina Web</a> </li>
<li><a href="http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html" target="_blank" rel="external">More about devicePixelRatio</a></li>
<li><a href="http://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="external">A tale of two viewports</a></li>
<li><a href="http://stackoverflow.com/questions/7344886/visual-viewport-vs-layout-viewport-on-mobile-devices" target="_blank" rel="external">visual-viewport-vs-layout-viewport-on-mobile-devices</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;所谓“Retina”是一种显示技术，可以将把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度。          —— 百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、device-pixel&quot;&gt;&lt;a href=&quot;#1、device-pixel&quot; class=&quot;headerlink&quot; title=&quot;1、device pixel&quot;&gt;&lt;/a&gt;1、device pixel&lt;/h2&gt;&lt;p&gt;&lt;code&gt;device pixel/physical pixel&lt;/code&gt;，即 &lt;strong&gt;设备像素/物理像素&lt;/strong&gt;。我们近距离观察显示器屏幕，可以看到很多个点紧紧排在一起，这些点就是物理像素点，每个点都有自己的颜色和亮度。&lt;/p&gt;
&lt;p&gt;一般可以通过 &lt;code&gt;screen.width/screen.height&lt;/code&gt; 获取设备像素（在 &lt;code&gt;PC&lt;/code&gt; 上就是电脑屏幕大小，当然这个值我们不 care）&lt;/p&gt;
&lt;p&gt;屏幕密度，即屏幕上存在的像素数量，通常用 &lt;code&gt;PPI&lt;/code&gt; 来衡量，即 &lt;code&gt;pixels per inch&lt;/code&gt;，每英寸的像素数。&lt;/p&gt;
&lt;p&gt;拿 &lt;code&gt;MX3&lt;/code&gt; 来说，分辨率 &lt;code&gt;1800 * 1080&lt;/code&gt;，尺寸 &lt;code&gt;5.1寸&lt;/code&gt;，它的 &lt;code&gt;PPI&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 411ppi&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PPI = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.sqrt(&lt;span class=&quot;number&quot;&gt;1080&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1080&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1800&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1800&lt;/span&gt;) / &lt;span class=&quot;number&quot;&gt;5.1&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础知识" scheme="https://atwxp.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>DeepLink &amp;&amp; Universal Link</title>
    <link href="https://atwxp.github.io/2017/04/10/deeplink/"/>
    <id>https://atwxp.github.io/2017/04/10/deeplink/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>webapp</code> 开发中最常见的一个需求就是在浏览器下尝试调起 <code>App</code>，在此总结通用的解决方案和原理。</p>
<h2 id="1、Deep-Link"><a href="#1、Deep-Link" class="headerlink" title="1、Deep Link"></a>1、Deep Link</h2><blockquote>
<p>In the context of mobile apps, deep linking consists of using a URL to link to specific content within an app.</p>
<p>In order for your app to respond to URL requests correctly you need to implement something called a URL scheme. You can specify the URL Scheme in your app and decide what content to display to the user once the link has been clicked on and the app opened.</p>
</blockquote>
<h3 id="1-1-URI-Scheme"><a href="#1-1-URI-Scheme" class="headerlink" title="1.1 URI Scheme"></a>1.1 URI Scheme</h3><p><code>Android 1.0</code> 就已经有了 <code>URI Scheme Deep Link</code>，它允许开发者给他们的 <code>APP</code> 注册一个 <code>URI</code>，然后我们在页面内可以通过一个链接如 <code>myapp://</code> 打开这个 <code>app</code>，如果没有安装会报 <code>page not found</code> 类似的错误或者没有任何反应</p>
<p><strong>不足：</strong><br>这种方法在用户安装了 <code>app</code> 的情况下，体验很好，如果没有安装 <code>app</code>，则会弹出 <code>页面未找到</code> 的错误弹框或者 <strong>没有反应</strong>，所以可能需要我们对这种情况降级处理</p>
<a id="more"></a>
<h3 id="1-2-Android-Chrome-Intent"><a href="#1-2-Android-Chrome-Intent" class="headerlink" title="1.2 Android Chrome Intent"></a>1.2 Android Chrome Intent</h3><p><code>Android Chrome 25+</code> 以后不在支持前面所说的 <code>uri scheme</code>，必须使用它规定的 <code>intent</code> 字符串形式，参考 <a href="https://developer.chrome.com/multidevice/android/intents" target="_blank" rel="external">Chrome documentation</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intent://<span class="tag">&lt;<span class="name">optional</span> <span class="attr">path</span>&gt;</span>#Intent;scheme=<span class="tag">&lt;<span class="name">URI</span> <span class="attr">scheme</span>&gt;</span>;package=<span class="tag">&lt;<span class="name">package</span>&gt;</span>;S.browser_fallback_url=<span class="tag">&lt;<span class="name">optional</span> <span class="attr">encoded</span> <span class="attr">fallback</span> <span class="attr">URL</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种形式提供了更好的解决方案：</p>
<ul>
<li>Open app via URI scheme if installed</li>
<li>Fall back to Play Store page if not installed</li>
<li>[Optional] Specify a URL to fall back to, instead of Play Store if not installed</li>
</ul>
<p>这就意味着对 <code>Android chrome 25+</code> 不必考虑未安装 <code>App</code> 的情况</p>
<h2 id="2、Deferred-Deep-Link"><a href="#2、Deferred-Deep-Link" class="headerlink" title="2、Deferred Deep Link"></a>2、Deferred Deep Link</h2><p><code>Deferred Deeplink</code> 先判断用户是否已经安装了 <code>App</code> 应用，如果没有则先引导至 <code>App</code> 应用商店中下载App，不同点在于用户安装 <code>App</code> 的情况下，跳转到的是指定的内容页面</p>
<p>Deeplink中，有几个服务可以用：<code>tune/branch/deepshare/LinkedMe/魔窗</code></p>
<h2 id="3、Universal-Link"><a href="#3、Universal-Link" class="headerlink" title="3、Universal Link"></a>3、Universal Link</h2><p><code>Android 6.0</code> 支持 <code>app Link</code> ，<code>IOS 9</code> 支持 <code>Universal Link</code></p>
<p><a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/UniversalLinks.html" target="_blank" rel="external">IOS 9</a> 这样介绍 <code>Universal Link</code> ：</p>
<blockquote>
<p>只要点击一个指向你网站的链接，就会直接跳到你的App的页面，无需通过Safari。如果设备上没有安装你的应用，则会在Safari中打开你的网址;<br>除了其他调用openURL的App外，只有WKWebView、UIWebView、Safari内点击的才支持跳转。像邮件、信息也是可以的;<br>这功能只支持iOS 9.0以上系统，更早的系统版本会直接在Safari打开链接</p>
</blockquote>
<p>在 <code>Android M(6.0)</code> 之前，我们用的是 <code>uri scheme</code> ，这种方法会弹出一个框，询问用户选择哪个 <code>App</code> 或者提示 <code>xx 想打开 xx</code>，<code>Google</code> 在 <code>Android M</code> 上添加了自动验证的功能，避免了这个弹框，使用户直达想要的 <code>App</code></p>
<h3 id="3-1-为什么要这么做"><a href="#3-1-为什么要这么做" class="headerlink" title="3.1 为什么要这么做"></a>3.1 为什么要这么做</h3><ul>
<li><p><code>Custom URL scheme</code> 因为是自定义的协议，所以在没有安装 <code>app</code> 的情况下是无法直接打开的，而 <code>universal links</code> 本身是一个 <code>HTTP/HTTPS</code> 链接，所以有更好的兼容性</p>
</li>
<li><p>不同的 <code>app</code> 是可以定义相同的 <code>ustom URL scheme</code> 的，所以会存在抢占或冲突的问题，而 <code>universal links</code> 是从 <code>server</code> 查询由哪个 <code>app</code> 打开的，所以不存在上述问题</p>
</li>
<li><p><code>Universal links</code> 支持从其他 <code>app</code> 的 <code>MKWebView</code> 或 <code>UIWebView</code> 中跳转到目标 app</p>
</li>
<li><p><code>Universal links</code> 本身可以被搜索引擎索引</p>
</li>
</ul>
<h3 id="3-2-怎么配置"><a href="#3-2-怎么配置" class="headerlink" title="3.2 怎么配置"></a>3.2 怎么配置</h3><p>一般都是端配置，大致是 在 Web 服务器上传 <code>apple-app-site-association</code> 的 json 文件，且能通过 <code>https</code> 访问到</p>
<p>我们不用关心</p>
<h3 id="3-3-Universal-Links的配置检查"><a href="#3-3-Universal-Links的配置检查" class="headerlink" title="3.3 Universal Links的配置检查"></a>3.3 Universal Links的配置检查</h3><p><a href="https://search.developer.apple.com/appsearch-validation-tool/" target="_blank" rel="external">App Search API Validation Tool</a> 提供了验证  <code>universal link</code> 的工具，如果 <code>Link to application</code> 的状态是 <code>passed</code> 就对了</p>
<p><img src="/assets/img/universal-pass.png" alt=""></p>
<h3 id="3-4-产品体验"><a href="#3-4-产品体验" class="headerlink" title="3.4 产品体验"></a>3.4 产品体验</h3><p>目前可以在网易新闻、糯米等很多地方看到这种技术，下图就是微信中打开网易新闻后的界面，可以看到左侧是“返回微信”右侧是 <code>163.com</code>（点击的话会在 <code>safari</code> 中打开 <code>universal link</code> 调起不成功情况下跳转的链接）</p>
<p><img src="http://bos.nj.bpc.baidu.com/v1/agroup/2788523d018e5c5f25fe7698471fe9e976d385d9" alt="图片"></p>
<h3 id="3-5-坑"><a href="#3-5-坑" class="headerlink" title="3.5 坑"></a>3.5 坑</h3><ul>
<li><p><code>universal link</code> 仅在 <code>safari/chrome</code> 有效，测试在 <code>IOS 9 UC/QQ/Chrome/Safari</code> 都有效</p>
</li>
<li><p>复制 <code>universal link</code> 到地址栏是无效的</p>
</li>
<li><p>因为是和 <code>App &amp; webapp</code> 绑定的，所以 <code>App</code> 要有一个与之相关的 <code>webapp</code>(废话…)</p>
</li>
<li><p>在 <code>a</code> 标签写上了 <code>target=&quot;_blank&quot;</code> 也是无效的（测试在 <code>chrome</code> 无效，所以建议不加）</p>
</li>
<li><p>Universal Links cannot be triggered via Javascript (in window.onload or via a .click() call on an <code>&lt;a&gt;</code> element), unless it is part of a user action. （待测试。。。）</p>
</li>
<li><p>从 iOS 9.2 开始，在相同的 domain 内 Universal Links 是不work的，必须要跨域才生效，实测只需要跨子域名即可，比如 m.domain.com 跳转 o.domain.com 是可以触发的(不大晓得…)</p>
</li>
<li><p><code>Universal Links</code> 可以由系统来做选择，在短信或其他应用中，长按选择打开方式，若选择 <code>Safari</code> 打开，则后续的跳转会默认跳 <code>Safari</code></p>
</li>
<li><p>如前面的图所示，如果用户点击了右上角的 <code>163.com</code> 链接，那么再次进入页面触发 <code>universal link</code> 不会在去调起 <code>App</code>，<a href="http://stackoverflow.com/questions/32751225/ios9-universal-links-does-not-work/32751734" target="_blank" rel="external">stackoverflow</a> 有回答：</p>
<blockquote>
<p>Note that if a Universal Link succeeds in opening your app and then you click through to Safari (by tapping your site in the top right corner of the nav bar in app), then iOS stops opening the app when you visit that URL. Then in Safari, you can pull down to reveal a banner at the top of the page with “Open”. I wasted a lot of time on this. Note that clicking through to the site =&gt; disabling UL seems path specific, based on the paths you specify in the apple-app-site-assocation file. So if you have separate routes, yoursite.com/a/<em> and yoursite.com/b/</em>, if you click yoursite.com/a/<em> and it opens your app directly, you then have the option in the top right corner of the app to click through to yoursite.com/a/</em>. If you do that, subsequent visits to yoursite.com/a/<em> will open in browser, not app. However, yoursite.com/b/</em> should be unaffected and still open your app directly.</p>
</blockquote>
</li>
</ul>
<p>更多的坑需要在具体实践中注意</p>
<h2 id="4、项目中的实践"><a href="#4、项目中的实践" class="headerlink" title="4、项目中的实践"></a>4、项目中的实践</h2><p><strong>a href/ location.href</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"myapp://"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><p>微信、微博无论装没装 <code>App</code> 都打不开</p>
</li>
<li><p>没有装 App，某些浏览器会跳到错误页，某些则是点击没有反应（符合前面描述的 <code>deeplink</code> 的问题）</p>
</li>
</ul>
<p>一种解决方法是设置一个延时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location.href = appUrl;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    location.href = h5Url;</div><div class="line">&#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>如果能打开 <code>app</code>，那就是成功；如果没有打开点击没有反应，会在 <code>1s</code> 后自动跳转到 <code>h5Url</code></p>
<p>这么写还是有些问题，如果用户切到 <code>App</code> 之后，迅速的又回到了 <code>h5</code> 页面，我们认为用户的行为就是想在 <code>h5</code> 页面浏览，那么这时候还进行 <code>h5Url</code> 的跳转是不合理的，所以可以改进一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">location.href = appUrl;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (+<span class="keyword">new</span> <span class="built_in">Date</span>() - t &lt; <span class="number">600</span>) &#123;</div><div class="line">        location.href = h5url;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="number">500</span>);</div></pre></td></tr></table></figure></p>
<p>PS：这个方法只解决了点击没有反应这个问题，跳到错误页的问题没有解决</p>
<p><strong>iframe</strong></p>
<p>另一种解决方法是通过 <code>iframe</code> 跳转<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">callIframe: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</div><div class="line">    iframe.style.display = <span class="string">'none'</span>;</div><div class="line">    iframe.style.width = <span class="number">0</span>;</div><div class="line">    iframe.style.height = <span class="number">0</span>;</div><div class="line"></div><div class="line">    iframe.src = <span class="keyword">this</span>.appUrl;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(iframe);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>经过测试：</p>
<ul>
<li><p>没有装 <code>App</code>，大多数浏览器都会跳转到 <code>h5Url</code>；safari 会弹出 “页面未找到” 的框再跳转到 <code>h5Url</code></p>
</li>
<li><p>装了 <code>App</code>，基本上都可以跳到 <code>App</code>；<code>Android Chrome</code> 调起不成功，符合前面所描述的 <code>Android Chrome Intent</code> 的情况，<code>maybe</code> 改成 <code>intent</code> 形式就好了；</p>
</li>
<li><p>已装 <code>App</code>，调起 <code>App</code> 成功后，浏览器也会同时加载一个 <code>h5</code> 页面</p>
</li>
</ul>
<p><code>iframe</code> 的方法算是解决了没有装 <code>App</code> 会跳到错误页的问题。</p>
<p><strong>如何避免同时加载 h5</strong></p>
<ul>
<li><p><code>pageshow</code>：页面显示时触发，在 <code>load</code> 事件之后触发。需要将该事件绑定到 <code>window</code> 上才会触发</p>
</li>
<li><p><code>pagehide</code>：页面隐藏时触发</p>
</li>
<li><p><code>visibilitychange</code>：页面隐藏没有在当前显示时触发，比如切换 <code>tab</code>，也会触发该事件</p>
</li>
<li><p><code>document.hidden</code>： 当页面隐藏时，该值为 <code>true</code>，显示时为 <code>false</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tag = <span class="built_in">document</span>.hidden || <span class="built_in">document</span>.webkitHidden;</div><div class="line">    <span class="keyword">if</span> (tag) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pagehide'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>然而不幸的是，不是所有浏览器都会支持这些事件，所以这个恐怕暂时避免不了。</p>
<p><strong>IOS9的升级</strong></p>
<p><code>IOS 9</code> 开始不支持 <code>iframe</code> 调起，点击没有反应，需要改为 <code>location.href</code> 调起，同时还做了下面的升级：</p>
<blockquote>
<p>What happens now is that in iOS 9, Apple changed the ‘Open App’ modal from a Javascript blocking modal to a non-blocking modal. </p>
</blockquote>
<p>所以和 <code>IOS9-</code> 表现不一样的是 <code>XX 想打开 XX/页面未找到</code> 的模态框不会阻塞 <code>js</code> 执行了。</p>
<ul>
<li><p>如果没有安装 <code>App</code>，就会弹出 “页面未找到” 的框；无效的弹窗提示在用户体验上是不允许出现的，但是线上产品普遍存在这个弹框的问题无法解决；但是在 <code>IOS9</code> 中会发现如果用户不进行操作，会自动跳转到 <code>h5Url</code> 了</p>
</li>
<li><p>安装了 <code>App</code>，也会弹框提示 “XX 想打开 XX” （感觉 <code>IOS9</code> 就是把 <code>iframe</code> 换成了 <code>location.href</code>，之所以这样做是为了支持 <code>universal link</code>）如果用户不点弹窗的确认按钮，会发现页面会自动跳转到 h5Url 了</p>
</li>
</ul>
<p><strong>微信的坑</strong></p>
<p>微信默认屏蔽了 <code>App</code> 的 <code>Scheme</code> 跳转，但是有些 <code>App</code> 是可以跳转的：</p>
<ul>
<li><p>大众点评，小红书，BiliBili，京东等</p>
</li>
<li><p>豆瓣等(<code>universal link</code>)</p>
</li>
</ul>
<p>参考 <a href="http://www.jianshu.com/p/3c2a0ba09ac8" target="_blank" rel="external">微信API－－WXAppExtendObject</a></p>
<h2 id="5、测试-demo"><a href="#5、测试-demo" class="headerlink" title="5、测试 demo"></a>5、测试 demo</h2><p><a href="http://jsbin.com/tujeyugoxe/5" target="_blank" rel="external">Demo</a></p>
<p><img src="/assets/img/universal-qrcode.png" alt=""></p>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://blog.branch.io/ios-9.2-redirection-update-uri-scheme-and-universal-links" target="_blank" rel="external">iOS 9.2 Update: The Fall of URI Schemes and the Rise of Universal Links</a></li>
<li><a href="http://www.magicwindow.cn/blog/posts/000035.html" target="_blank" rel="external">iOS/Android 浏览器(h5)及微信中唤起本地APP</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;webapp&lt;/code&gt; 开发中最常见的一个需求就是在浏览器下尝试调起 &lt;code&gt;App&lt;/code&gt;，在此总结通用的解决方案和原理。&lt;/p&gt;
&lt;h2 id=&quot;1、Deep-Link&quot;&gt;&lt;a href=&quot;#1、Deep-Link&quot; class=&quot;headerlink&quot; title=&quot;1、Deep Link&quot;&gt;&lt;/a&gt;1、Deep Link&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;In the context of mobile apps, deep linking consists of using a URL to link to specific content within an app.&lt;/p&gt;
&lt;p&gt;In order for your app to respond to URL requests correctly you need to implement something called a URL scheme. You can specify the URL Scheme in your app and decide what content to display to the user once the link has been clicked on and the app opened.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-1-URI-Scheme&quot;&gt;&lt;a href=&quot;#1-1-URI-Scheme&quot; class=&quot;headerlink&quot; title=&quot;1.1 URI Scheme&quot;&gt;&lt;/a&gt;1.1 URI Scheme&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Android 1.0&lt;/code&gt; 就已经有了 &lt;code&gt;URI Scheme Deep Link&lt;/code&gt;，它允许开发者给他们的 &lt;code&gt;APP&lt;/code&gt; 注册一个 &lt;code&gt;URI&lt;/code&gt;，然后我们在页面内可以通过一个链接如 &lt;code&gt;myapp://&lt;/code&gt; 打开这个 &lt;code&gt;app&lt;/code&gt;，如果没有安装会报 &lt;code&gt;page not found&lt;/code&gt; 类似的错误或者没有任何反应&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不足：&lt;/strong&gt;&lt;br&gt;这种方法在用户安装了 &lt;code&gt;app&lt;/code&gt; 的情况下，体验很好，如果没有安装 &lt;code&gt;app&lt;/code&gt;，则会弹出 &lt;code&gt;页面未找到&lt;/code&gt; 的错误弹框或者 &lt;strong&gt;没有反应&lt;/strong&gt;，所以可能需要我们对这种情况降级处理&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>window.getComputedStyle</title>
    <link href="https://atwxp.github.io/2017/04/10/getComputedStyle/"/>
    <id>https://atwxp.github.io/2017/04/10/getComputedStyle/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>获取元素的样式通常使用 <code>window.getComputedStyle</code>，有一天我写成了 <code>document.getComputedStyle</code>，总感觉不对劲，网上一查还真这回事o(╯□╰)o，只不过不是这样写的，而是 <code>document.defaultView.getComputedStyle</code></p>
<h2 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h2><pre><code>window.getComputedStyle(elem, [pseudoElt])
</code></pre><p>1、使用这个方法返回的结果和 <code>elem.style</code> 返回的是一样的，都是 <code>CSSStyleDeclaration</code> 对象</p>
<p><img src="/assets/img/getComputedStyle.png" alt=""></p>
<p><img src="/assets/img/style-declaration.png" alt=""></p>
<p>但是二者也有一些区别：</p>
<a id="more"></a>
<ul>
<li>前者是只读的，可以获取元素所有的样式信息，在 <code>chrome</code> 下测试返回 <code>293</code> 个属性</li>
<li>后者不仅可读还可以写，只能获取元素 <code>style</code> 属性中的样式</li>
</ul>
<p>2、获取伪元素</p>
<p><img src="/assets/img/pseudo.png" alt=""></p>
<p>3、值的类型</p>
<p>通过 <code>getComputedStyle()</code> 返回的值是 <code>resolved value</code>，这个值通常和 <code>CSS2.1 computed value</code> 相同，但是对于一些属性如 <code>width, height</code>可能就和 <code>used value</code> 相同。</p>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle" target="_blank" rel="external">MDN</a>上说有些浏览器获取不到元素过渡时候的样式，自测 <code>chomre, FF</code> 是可以的，不过使用的时候还是注意一下为好</p>
<blockquote>
<p>During a CSS transition, getComputedStyle returns the original property value in Firefox, but the final property value in WebKit.</p>
</blockquote>
<p>4、兼容性</p>
<p>移动端：<code>IOS safari 4.3, android 3-</code> 不支持伪元素</p>
<p>PC：<code>IE8-</code> 完全不支持</p>
<p>所以在移动端，只要不涉及伪元素和低版本，可以放心使用</p>
<h2 id="getPropertyValue"><a href="#getPropertyValue" class="headerlink" title="getPropertyValue()"></a>getPropertyValue()</h2><p>返回指定样式属性的值，是 <code>CSSStyleDeclaration</code> 对象的方法，用这个的好处：</p>
<p>1、对于驼峰式的样式名，如 <code>background-color</code>，就可以直接写</p>
<pre><code>window.getComputedStyle(div, null).backgroundColor;
// equal
div.style.getPropertyValue(&apos;background-color&apos;);
</code></pre><p>2、对于 <code>float</code> 这些特殊样式名，不用考虑浏览器使用 <code>cssFloat, styleFloat</code> 等</p>
<pre><code>div.style.getPropertyValue(&apos;float&apos;);
</code></pre><p>综上，推荐使用这个获取样式</p>
<p>3、兼容性</p>
<p><code>IE9+</code>，现代浏览器 支持</p>
<h2 id="document-defaultView-getComputedStyle"><a href="#document-defaultView-getComputedStyle" class="headerlink" title="document.defaultView.getComputedStyle"></a>document.defaultView.getComputedStyle</h2><p>不必要的，因为 <code>window.getComputedStyle()</code> 已经存在了，干嘛还再多访问一层属性呢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;获取元素的样式通常使用 &lt;code&gt;window.getComputedStyle&lt;/code&gt;，有一天我写成了 &lt;code&gt;document.getComputedStyle&lt;/code&gt;，总感觉不对劲，网上一查还真这回事o(╯□╰)o，只不过不是这样写的，而是 &lt;code&gt;document.defaultView.getComputedStyle&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;window-getComputedStyle&quot;&gt;&lt;a href=&quot;#window-getComputedStyle&quot; class=&quot;headerlink&quot; title=&quot;window.getComputedStyle&quot;&gt;&lt;/a&gt;window.getComputedStyle&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;window.getComputedStyle(elem, [pseudoElt])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1、使用这个方法返回的结果和 &lt;code&gt;elem.style&lt;/code&gt; 返回的是一样的，都是 &lt;code&gt;CSSStyleDeclaration&lt;/code&gt; 对象&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/getComputedStyle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/style-declaration.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是二者也有一些区别：&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>iphone上click事件不冒泡到document</title>
    <link href="https://atwxp.github.io/2017/04/10/click/"/>
    <id>https://atwxp.github.io/2017/04/10/click/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T04:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在一个带有 <strong>展开/收起</strong> 的列表里，使用了委托处理点击 <strong>查看更多</strong> 的逻辑，如下图：</p>
<p><img src="/assets/img/more.png" alt=""></p>
<p>代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.footer'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这段代码在 <code>iphone</code> 上点开不了，安卓都是 <code>OK</code> 的。可以点一下 <a href="http://jsbin.com/zusapo/1/edit?html,css,js,output" target="_blank" rel="external">测试DEMO</a> 体验一下</p>
<a id="more"></a>
<h2 id="为什么呢"><a href="#为什么呢" class="headerlink" title="为什么呢"></a>为什么呢</h2><p>从网上搜到几篇文章提到 <a href="http://api.jquery.com/live/" target="_blank" rel="external">API-jQuery</a> 有对 <code>click</code> 使用的提示：</p>
<blockquote>
<p>On mobile iOS (iPhone, iPad and iPod Touch) the click event does not bubble to the document body for most elements and cannot be used with .live() without applying one of the following workarounds:</p>
<ul>
<li>Use natively clickable elements such as a or button, as both of these do bubble to document.</li>
<li>Use .on() or .delegate() attached to an element below the level of document.body, since mobile iOS does bubble within the body.</li>
<li>Apply the CSS style cursor:pointer to the element that needs to bubble clicks (or a parent including document.documentElement). Note however, this will disable copy\paste on the element and cause it to be highlighted when touched.</li>
</ul>
</blockquote>
<p>简单来说就是：</p>
<p>手机端的 <code>IOS</code>（<code>iPhone, iPad, iPod Touch</code>) 上，对于大多数元素来说，<code>click</code> 事件不会冒泡到 <code>document.body</code> 这个元素上，而且如果不满足下面的条件之一，不能和 <code>.live()/.on()</code> 使用:</p>
<ul>
<li>使用原生可以冒泡到 <code>document</code> 的元素，如 <code>a，button</code></li>
<li>委托事件到 <code>document.body</code> 的子元素</li>
<li>给需要冒泡 <code>click</code> 的元素或者其父元素（包括 <code>document.documentElement</code> ）设置 <code>cursor: pointer</code>，但是这样做不能 <strong>复制/粘贴</strong> 该元素内容，并且点击元素会高亮显示</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fold"</span>&gt;</span>not A or button element, iphone 上 document委托失效<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fold"</span> <span class="attr">style</span>=<span class="string">"cursor:pointer"</span>&gt;</span>set cursor: pointer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">class</span>=<span class="string">"fold"</span>&gt;</span>a element success<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1、委托到目标元素的父元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.wrap'</span>).on(<span class="string">'click'</span>, <span class="string">'.fold'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'委托到目标元素的父元素, success！'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>没啥兼容问题</p>
<p>2、设置目标元素 cursor: pointer<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'.fold'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    alert(<span class="string">'cursor: pointer, success！'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>iphone6</code> 上测试，复制粘贴没有问题，点击存在高亮</p>
<p>3、给body的子元素写一个click事件</p>
<p>参考 <a href="http://www.uis.cc/content-9-380-1.html" target="_blank" rel="external">这篇文章</a></p>
<blockquote>
<p>在冒泡阶段，有一个节点处理了该事件，它就不会丢弃该事件，会继续往上冒，冒到body 然后document 然后window</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>.body.children[<span class="number">0</span>]).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'给body内其他元素绑定一个事件'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>点 <a href="http://jsbin.com/zexiqo" target="_blank" rel="external">这里</a>，扫码如下，</p>
<p><img src="/assets/img/click-qrcode.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对比以上三种解决方法，委托到目标元素的父元素 是最简单、没有兼容性问题的方法。</p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在一个带有 &lt;strong&gt;展开/收起&lt;/strong&gt; 的列表里，使用了委托处理点击 &lt;strong&gt;查看更多&lt;/strong&gt; 的逻辑，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/more.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;.footer&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段代码在 &lt;code&gt;iphone&lt;/code&gt; 上点开不了，安卓都是 &lt;code&gt;OK&lt;/code&gt; 的。可以点一下 &lt;a href=&quot;http://jsbin.com/zusapo/1/edit?html,css,js,output&quot;&gt;测试DEMO&lt;/a&gt; 体验一下&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Media Query</title>
    <link href="https://atwxp.github.io/2017/04/10/media-query/"/>
    <id>https://atwxp.github.io/2017/04/10/media-query/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Media-Type"><a href="#一、Media-Type" class="headerlink" title="一、Media Type"></a>一、Media Type</h1><p><code>HTML4</code> 和 <code>CSS2</code> 支持针对不同媒体类型（<code>Media Type</code>）定制不同的媒体样式。</p>
<p>在 <code>HTML</code> 中可以这样使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"print"</span> <span class="attr">href</span>=<span class="string">"print.css"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>在样式表中可以这样写:<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen &#123;</div><div class="line">    <span class="selector-tag">p</span> &#123;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>规范定义很多媒体类型，但是都支持的浏览器确是很少，不过大都会支持这两个类型：<code>screen &amp; print</code></p>
<a id="more"></a>
<h1 id="二、Media-Query"><a href="#二、Media-Query" class="headerlink" title="二、Media Query"></a>二、Media Query</h1><p><code>Media Query</code> 在 <code>Media Type</code>的基础上添加了对CSS属性的判断，所以它实际上是一个逻辑表达式。</p>
<h3 id="OR-media-query-list"><a href="#OR-media-query-list" class="headerlink" title="OR (media query list)"></a>OR (media query list)</h3><p>媒体查询列表即包含着多个媒体查询条件，只要符合一条即返回 <code>true</code>，即<strong>逻辑或</strong>的处理逻辑。如果列表为空，相当于返回 <code>true</code>。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen, print &#123; … &#125;</div><div class="line">@<span class="keyword">media</span> all &#123; … &#125;</div><div class="line">@<span class="keyword">media</span> &#123; … &#125;</div></pre></td></tr></table></figure></p>
<h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p><code>all</code> 关键字表示适用于所有媒体类型，如果不明确媒体类型的话默认就是 <code>all</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> all and (device-width: <span class="number">320px</span>) &#123;&#125;</div><div class="line">@<span class="keyword">media</span> (device-width: <span class="number">320px</span>) &#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="not-only"><a href="#not-only" class="headerlink" title="not/only"></a>not/only</h3><p><code>not</code> 用来指定某个的媒体查询条件，而 <code>only</code> 用来指定某种媒体查询条件，用来排除不支持媒体查询的浏览器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> not screen &#123;&#125;</div><div class="line">@<span class="keyword">media</span> only print &#123;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="支持的属性"><a href="#支持的属性" class="headerlink" title="支持的属性"></a>支持的属性</h3><ul>
<li><p><code>width</code>：布局视口的宽度</p>
</li>
<li><p><code>height</code>：布局视口的高度</p>
</li>
<li><p><code>device-width</code>：设备的宽度</p>
</li>
<li><p><code>device-height</code>：设备的高度</p>
</li>
<li><p><code>device-aspect-ratio</code>：设备像素比</p>
</li>
<li><p><code>orientation</code>：横屏(lanscape) 或者 竖屏(portrait)</p>
</li>
<li><p>…</p>
</li>
</ul>
<p>PS：这里只列出经常使用的属性</p>
<p>列出来这些属性之后，我发现少了我们最经常使用的 <code>device-pixel-ratio</code>，但是文档也没有提到它，后来在 <a href="http://caniuse.com/#search=media" target="_blank" rel="external">caniuse</a> 发现 <code>device-pixel-ratio</code> 竟然标记为 <code>older not standard device-pixel-ratio media query</code>。。。写了那么久以为是 <code>standard</code>，太孤陋寡闻了~</p>
<h3 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h3><p><code>resolution</code>描述设备的分辨率（像素密度），单位有 <code>dpi &amp; dpcm</code>以及后来新增的 <code>dppi</code></p>
<ul>
<li><p><code>dpi</code>：<code>dot per inch</code></p>
</li>
<li><p><code>dpcm</code>：<code>dot per centimeter</code></p>
</li>
<li><p><code>dppi</code>：<code>dot per pixel</code></p>
</li>
</ul>
<p>简单的说就是 <code>resolution</code> 定义了 <code>1px || 1 inch || 1 cm CSS</code> 像素包含了多少个 <code>物理像素点</code>。</p>
<p>例如 <code>iphone retina</code> 的设备像素比是 <code>2</code>，那么完整的写法是：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* dpi */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-device-pixel-ratio: <span class="number">2</span>),</div><div class="line">    (min-resolution: <span class="number">192dpi</span>)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* dppi */</span></div><div class="line">@<span class="keyword">media</span> screen and (min-device-pixel-ratio: <span class="number">2</span>),</div><div class="line">    (min-resolution: <span class="number">2</span>dppi) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>PS：<code>1dppi = 96dpi</code></p>
<p>至于为什么 <code>device-pixel-ratio</code> 不添加到规范中，可以看看 <a href="http://www.w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio/" target="_blank" rel="external">这篇文章</a></p>
<h1 id="三、兼容性"><a href="#三、兼容性" class="headerlink" title="三、兼容性"></a>三、兼容性</h1><h3 id="Media-Query-Feature"><a href="#Media-Query-Feature" class="headerlink" title="Media Query Feature"></a>Media Query Feature</h3><table>
<thead>
<tr>
<th style="text-align:center">IE</th>
<th style="text-align:center">Chrome</th>
<th style="text-align:left">FireFox</th>
<th>Safari</th>
<th>Opera</th>
<th>IOS Safari</th>
<th>Android</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">9+</td>
<td style="text-align:center">4+</td>
<td style="text-align:left">3.5+</td>
<td>3.1+</td>
<td>10.1+</td>
<td>3.2+</td>
<td>2.1+</td>
</tr>
</tbody>
</table>
<p>从 上表 以及 <a href="http://caniuse.com/#search=media" target="_blank" rel="external">caniuse</a> 可以看出，除了 <code>IE8-</code> 之外，其他浏览器都是支持 <code>Media Query</code>的，真是非常赞！</p>
<h3 id="Resolution-Feature"><a href="#Resolution-Feature" class="headerlink" title="Resolution Feature"></a>Resolution Feature</h3><ul>
<li><code>IE</code>：<code>IE9+</code> 支持，但是只支持 <code>dpi</code></li>
</ul>
<ul>
<li><p><code>Chrome</code>：<code>4 - 28</code> 支持 <code>device-pixel-ratio</code>，<code>28+</code>支持 <code>resolution</code></p>
<ul>
<li><p>最小：<code>-min-webkit-device-pixel-ratio</code></p>
</li>
<li><p>最大：<code>-max-webkit-device-pixel-ratio</code></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>Firefox</code>：<code>16-</code>  支持 <code>device-pixel-ratio</code>，对于 <code>resolution</code> 只支持 <code>dpi</code>；</p>
<ul>
<li><p>最小：<code>min--moz-device-pixel-ratio</code></p>
</li>
<li><p>最大：<code>max--moz-device-pixel-ratio</code></p>
</li>
</ul>
</li>
</ul>
<ul>
<li><code>safari</code>：目前只支持 <code>device-pixel-ratio</code>，且要加 <code>-webkit-</code></li>
</ul>
<ul>
<li><p><code>opera</code>：<code>10.1 - 11.5</code> 支持 <code>device-pixel-ratio</code>，<code>12.1+</code>开始支持 <code>resolution</code></p>
<ul>
<li><code>webkit</code> 下的 <code>2</code> 要写成 <code>2/1</code>，<code>1</code> 即要写成 <code>1/1</code></li>
</ul>
</li>
</ul>
<ul>
<li><code>android</code>：<code>2.3 - 4.3</code> 支持 <code>device-pixel-ratio</code>，<code>4.4+</code>开始支持 <code>resolution</code></li>
</ul>
<p>所以，针对高像素密度的屏幕适配如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span></div><div class="line">    only screen and (-webkit-min-device-pixel-ratio: <span class="number">2</span>),   // webkit-base(safari, android)</div><div class="line">    only screen and (  min--moz-device-pixel-ratio: <span class="number">2</span>),    // firefox <span class="number">16</span>-</div><div class="line">    only screen and (    -o-min-device-pixel-ratio: <span class="number">2</span>/<span class="number">1</span>),  // opera <span class="number">11.5</span>-</div><div class="line">    only screen and (      min-device-pixel-ratio: <span class="number">2</span>),     // for standard</div><div class="line">    only screen and (        min-resolution: <span class="number">192dpi</span>),      // IE9+</div><div class="line">    only screen and (          min-resolution: <span class="number">2dppx</span>)      // dppi</div><div class="line">    &#123;</div><div class="line">        <span class="comment">/* Retina-specific stuff here */</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><ul>
<li><a href="http://www.w3.org/TR/css3-mediaqueries" target="_blank" rel="external">Media Query W3C SPEC</a></li>
<li><a href="http://www.w3.org/blog/CSS/2012/06/14/unprefix-webkit-device-pixel-ratio/" target="_blank" rel="external">unprefix-webkit-device-pixel-ratio</a></li>
<li><a href="http://www.w3.org/TR/css3-images/#resolution-units" target="_blank" rel="external">resolution-units</a></li>
<li><a href="https://css-tricks.com/snippets/css/retina-display-media-query/" target="_blank" rel="external">retina-display-media-query</a></li>
<li><a href="http://stephen.io/mediaqueries/" target="_blank" rel="external">iPhone iPad Media Query</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Media-Type&quot;&gt;&lt;a href=&quot;#一、Media-Type&quot; class=&quot;headerlink&quot; title=&quot;一、Media Type&quot;&gt;&lt;/a&gt;一、Media Type&lt;/h1&gt;&lt;p&gt;&lt;code&gt;HTML4&lt;/code&gt; 和 &lt;code&gt;CSS2&lt;/code&gt; 支持针对不同媒体类型（&lt;code&gt;Media Type&lt;/code&gt;）定制不同的媒体样式。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;HTML&lt;/code&gt; 中可以这样使用&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;media&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;print&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;print.css&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在样式表中可以这样写:&lt;br&gt; &lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@&lt;span class=&quot;keyword&quot;&gt;media&lt;/span&gt; screen &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#f00&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;规范定义很多媒体类型，但是都支持的浏览器确是很少，不过大都会支持这两个类型：&lt;code&gt;screen &amp;amp; print&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础知识" scheme="https://atwxp.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>touchcancel的使用</title>
    <link href="https://atwxp.github.io/2017/04/10/touchcancel/"/>
    <id>https://atwxp.github.io/2017/04/10/touchcancel/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常我们常用的手势事件有 <code>touchstart, touchmove, touchend</code>，对 <code>touchcancel</code> 用之甚少，仅知道就是由于系统原因导致的手势中断而触发的事件。</p>
<p>在一个项目中我就用到了这个事件 <code>touchcancel</code>，有这么个需求：需要监听长按下载这个动作（浏览器默认支持长按下载，同时会弹出一个系统弹框）</p>
<p>很自然我们就想到了监听 <code>touchstart/touchend</code>，在 <code>touchstart</code> 记录起始点/时间，在 <code>touchend</code> 记录终止点/时间，满足长按要求则触发事件；</p>
<a id="more"></a>
<p>在实际测试过程中，有些浏览器并不触发 <code>touchend</code> 事件，这时候想到了 <code>touchcancel</code> ，猜测应该是这些浏览器弹出下载浮层属于系统中断 <code>touch</code> 事件，经测试猜想是正确的。</p>
<p>结论：某些浏览器下（<code>UC/QQ...</code>）系统弹层会阻止当前 <code>touch</code> 事件的发生，需要同时监听 <code>touchend/touchcancel</code>，代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * init</div><div class="line">     *</div><div class="line">     * @param &#123;DOM&#125;         wrapper longtap'wrapper</div><div class="line">     * @param &#123;Object&#125;      options options</div><div class="line">     * @property &#123;number&#125;   options.thresold 阈值</div><div class="line">     * @property &#123;number&#125;   options.allowedTIme 允许时间</div><div class="line">     * @param &#123;Function&#125;    callback 回调函数</div><div class="line">     */</div><div class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params">wrapper, options, callback</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> settings = &#123;</div><div class="line">            <span class="attr">thresold</span>: <span class="number">5</span>,</div><div class="line"></div><div class="line">            <span class="attr">allowedTime</span>: <span class="number">300</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!wrapper) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'function'</span>) &#123;</div><div class="line">            callback = options;</div><div class="line"></div><div class="line">            options = &#123;&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        callback = callback || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">        util.extend(settings, options);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> startX;</div><div class="line">        <span class="keyword">var</span> startY;</div><div class="line">        <span class="keyword">var</span> startTime;</div><div class="line"></div><div class="line">        wrapper.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> touchobj = e.changedTouches[<span class="number">0</span>];</div><div class="line"></div><div class="line">            startX = touchobj.pageX;</div><div class="line"></div><div class="line">            startY = touchobj.pageY;</div><div class="line"></div><div class="line">            startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">        &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">        wrapper.addEventListener(<span class="string">'touchend'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            e.stopPropagation();</div><div class="line">            e.preventDefault();</div><div class="line"></div><div class="line">            <span class="keyword">var</span> elapsedTime = +<span class="keyword">new</span> <span class="built_in">Date</span>() - startTime;</div><div class="line"></div><div class="line">            <span class="keyword">var</span> touchobj = e.changedTouches[<span class="number">0</span>];</div><div class="line">            <span class="keyword">var</span> endX = touchobj.pageX;</div><div class="line">            <span class="keyword">var</span> endY = touchobj.pageY;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (</div><div class="line">                <span class="built_in">Math</span>.abs(endX - startX) &lt; settings.thresold</div><div class="line">                &amp;&amp; <span class="built_in">Math</span>.abs(endY - startY) &lt; settings.thresold</div><div class="line">                &amp;&amp; elapsedTime &gt; settings.allowedTime</div><div class="line">            ) &#123;</div><div class="line">                callback();</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line">        wrapper.addEventListener(<span class="string">'touchcancel'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            callback();</div><div class="line">        &#125;, <span class="literal">false</span>);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    exports.init = init;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常我们常用的手势事件有 &lt;code&gt;touchstart, touchmove, touchend&lt;/code&gt;，对 &lt;code&gt;touchcancel&lt;/code&gt; 用之甚少，仅知道就是由于系统原因导致的手势中断而触发的事件。&lt;/p&gt;
&lt;p&gt;在一个项目中我就用到了这个事件 &lt;code&gt;touchcancel&lt;/code&gt;，有这么个需求：需要监听长按下载这个动作（浏览器默认支持长按下载，同时会弹出一个系统弹框）&lt;/p&gt;
&lt;p&gt;很自然我们就想到了监听 &lt;code&gt;touchstart/touchend&lt;/code&gt;，在 &lt;code&gt;touchstart&lt;/code&gt; 记录起始点/时间，在 &lt;code&gt;touchend&lt;/code&gt; 记录终止点/时间，满足长按要求则触发事件；&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>RSS Reader Chrome Extension</title>
    <link href="https://atwxp.github.io/2017/04/10/rss-reader-cx/"/>
    <id>https://atwxp.github.io/2017/04/10/rss-reader-cx/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T04:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>写了个简单的 <a href="https://github.com/atwxp/rss/" target="_blank" rel="external">rss reader</a> 扩展，用来订阅一些博客了解最新的技术进展。</p>
<h2 id="1、实现的功能"><a href="#1、实现的功能" class="headerlink" title="1、实现的功能"></a>1、实现的功能</h2><ul>
<li>支持添加订阅、导入已有的 OPML，导出 OPML，可以分享到微博、印象笔记、（微信todo）</li>
<li>可以配置每页文章数量，几天更新一次</li>
<li>使用客户端存储 <code>localStorage</code></li>
<li>每次切换到新的 <code>rss feed</code>，都会先判断本地存储是否存在且是否过期，过期会重新更新</li>
<li>导入 <code>OPML</code> 不会立刻请求所有文章更新，而添加单个 <code>feed</code> 会立刻请求文章存储在本地</li>
</ul>
<h2 id="2、实现效果"><a href="#2、实现效果" class="headerlink" title="2、实现效果"></a>2、实现效果</h2><p><img src="/assets/img/rss.png" alt=""></p>
<p><img src="/assets/img/rss-detail.png" alt=""></p>
<a id="more"></a>
<h2 id="3、怎么做的"><a href="#3、怎么做的" class="headerlink" title="3、怎么做的"></a>3、怎么做的</h2><p>主要是用 <code>vue + vuex + vue-router + vue-resource + webpack</code> 搭建，<code>chrome</code> 扩展以及 <code>rss</code> 相关的知识</p>
<h3 id="3-1-chrome-extension"><a href="#3-1-chrome-extension" class="headerlink" title="3.1 chrome extension"></a>3.1 chrome extension</h3><p>首先每个扩展都必须有个 <code>manifest.json</code> 文件，它是扩展的入口，数据格式是 <code>json</code>，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"manifest_version"</span>: <span class="number">2</span>,</div><div class="line">    <span class="string">"name"</span>: <span class="string">"RSS"</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"2.0"</span>,</div><div class="line">    <span class="string">"browser_action"</span>: &#123;</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"background"</span>: &#123;</div><div class="line">        <span class="string">"scripts"</span>: [<span class="string">"background.js"</span>],</div><div class="line">        <span class="string">"persistent"</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"permissions"</span>: [<span class="string">"*://*/*"</span>, <span class="string">"tabs"</span>],</div><div class="line">    <span class="string">"content_security_policy"</span>: <span class="string">"script-src 'self' 'unsafe-eval'; object-src 'self'"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>name, version, manifest_version</code> 是必须的，<code>manifest_version</code> 目前来说是 2</p>
<p>当我们点击扩展图标的时候，希望打开一个新的 <code>tab</code>，可以通过 <code>background</code> 配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// background.js</span></div><div class="line">chrome.browserAction.onClicked.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">tab</span>) </span>&#123;</div><div class="line">    chrome.tabs.create(&#123;<span class="attr">url</span>: url&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>因为我们需要请求 <code>feed url</code>，所以会涉及到跨域，<code>chrome</code> 扩展允许指定 <code>permissions</code> 声明跨域请求，比如我们尝试请求 <code>m.nuomi.com</code> 可以配置 <code>manifest.json</code> 如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"permissions"</span>: [<span class="string">"*://*.nuomi.com/*"</span>]</div></pre></td></tr></table></figure>
<h3 id="3-2-atom-rss-xml"><a href="#3-2-atom-rss-xml" class="headerlink" title="3.2 atom/rss xml"></a>3.2 atom/rss xml</h3><p>这俩的规范在 <a href="https://validator.w3.org/feed/docs/" target="_blank" rel="external">这里</a></p>
<p>解析一段字符串为 <code>XML</code> 主要用到了 <code>new DOMParser()</code>，然后根据 <code>DOM</code> 结构解析即可</p>
<h3 id="3-3-vue"><a href="#3-3-vue" class="headerlink" title="3.3 vue"></a>3.3 vue</h3><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由设计很简单就三个：</p>
<ul>
<li><code>/add</code>: 添加、导出、导入 feed</li>
<li><code>/setting</code>：设置每页文章数目、每几天更新</li>
<li><code>/feed/:id</code>：feed的详情页</li>
</ul>
<h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>数据有两个，<code>feedList</code> 存储订阅的 <code>feed</code> 源数组，<code>config</code> 存储阅读器本身的配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> store = &#123;</div><div class="line">    <span class="attr">feedList</span>: [],</div><div class="line">    <span class="attr">config</span>: &#123;</div><div class="line">        <span class="attr">perPage</span>: <span class="number">5</span>,</div><div class="line">        <span class="attr">expired</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="action"><a href="#action" class="headerlink" title="action"></a>action</h4><p><code>action</code> 有四个：添加订阅源 <code>ADD_FEED</code>, 删除订阅源 <code>DELETE_FEED</code>, 更改配置 <code>UPDATE_CONFIG</code>，获取 <code>FeedList</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> addFeed = <span class="function">(<span class="params">&#123; commit &#125;, feed</span>) =&gt;</span> &#123;</div><div class="line">    commit(types.ADD_FEED, <span class="built_in">Array</span>.isArray(feed) ? feed : [feed])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteFeed = <span class="function">(<span class="params">&#123; commit &#125;, id</span>) =&gt;</span> &#123;</div><div class="line">    commit(types.DELETE_FEED, id)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> updateConfig = <span class="function">(<span class="params">&#123; commit &#125;, cfg</span>) =&gt;</span> &#123;</div><div class="line">    commit(types.UPDATE_CONFIG, cfg)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchFeedList = <span class="function">(<span class="params">&#123; commit &#125;, [ url, id ]</span>) =&gt;</span> &#123;</div><div class="line">    commit(types.SET_FEEDLIST, rss)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-4-其他"><a href="#3-4-其他" class="headerlink" title="3.4 其他"></a>3.4 其他</h3><p><code>webpack2</code> 有很多规则都不太一样了，比如 <code>loader</code> 的配置，<code>loaders</code> 改为了 <code>rules</code>，<code>loader</code>名字不能简写要写上 <code>xx-loader</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">            <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>比如 <code>resolve</code> 中 <code>extensions</code> 第一个元素不再是 <code>&#39;&#39;</code> 了，默认是 <code>[&#39;.js&#39;, &#39;json&#39;]</code>，模块的查找路径写成了 <code>modules: [src_path, &#39;node_modules&#39;]</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="attr">modules</span>: [SRC_PARH, <span class="string">'node_modules'</span>],</div><div class="line">    <span class="attr">alias</span>: &#123;</div><div class="line">        <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.common.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.vue'</span>]</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="4、-总结"><a href="#4、-总结" class="headerlink" title="4、 总结"></a>4、 总结</h2><p>学习了 <code>vue</code> 全家桶的使用，不懂的地方其文档也写的非常清楚，以后还要更深入的理解</p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写了个简单的 &lt;a href=&quot;https://github.com/atwxp/rss/&quot;&gt;rss reader&lt;/a&gt; 扩展，用来订阅一些博客了解最新的技术进展。&lt;/p&gt;
&lt;h2 id=&quot;1、实现的功能&quot;&gt;&lt;a href=&quot;#1、实现的功能&quot; class=&quot;headerlink&quot; title=&quot;1、实现的功能&quot;&gt;&lt;/a&gt;1、实现的功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持添加订阅、导入已有的 OPML，导出 OPML，可以分享到微博、印象笔记、（微信todo）&lt;/li&gt;
&lt;li&gt;可以配置每页文章数量，几天更新一次&lt;/li&gt;
&lt;li&gt;使用客户端存储 &lt;code&gt;localStorage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每次切换到新的 &lt;code&gt;rss feed&lt;/code&gt;，都会先判断本地存储是否存在且是否过期，过期会重新更新&lt;/li&gt;
&lt;li&gt;导入 &lt;code&gt;OPML&lt;/code&gt; 不会立刻请求所有文章更新，而添加单个 &lt;code&gt;feed&lt;/code&gt; 会立刻请求文章存储在本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2、实现效果&quot;&gt;&lt;a href=&quot;#2、实现效果&quot; class=&quot;headerlink&quot; title=&quot;2、实现效果&quot;&gt;&lt;/a&gt;2、实现效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/assets/img/rss.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/rss-detail.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="茶余饭后" scheme="https://atwxp.github.io/categories/%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
      <category term="chrome extension" scheme="https://atwxp.github.io/tags/chrome-extension/"/>
    
  </entry>
  
  <entry>
    <title>CSS Selector</title>
    <link href="https://atwxp.github.io/2017/04/10/selector/"/>
    <id>https://atwxp.github.io/2017/04/10/selector/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是选择符"><a href="#什么是选择符" class="headerlink" title="什么是选择符"></a>什么是选择符</h2><p>选择符决定它和文档树中的哪个元素相匹配，其实是模式匹配，这样它所定义的样式就能应用到那个元素上。</p>
<h2 id="怎么写"><a href="#怎么写" class="headerlink" title="怎么写"></a>怎么写</h2><p>选择符可以简单到只有一个元素名，如 <code>p {}</code>，也可以复杂到很多选择符组合在一起，如 <code>.header .title {}</code>。那它是怎么定义的呢？<a href="https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#selector-syntax" target="_blank" rel="external">CSS3</a> 中定义：</p>
<ul>
<li>选择符是一组或多组<strong>简单选择符</strong>通过连接符组合起来的</li>
<li>一组简单选择符就是多个<strong>简单选择符</strong>不是用连接符组合起来的</li>
<li>简单选择符就是最最基本的选择符，包含 通用选择符(<code>*</code>)、类型选择符(<code>p, div...</code>)、类(<code>.header...</code>)、伪类(<code>:first-child...</code>)、ID(<code>#footer</code>…)、属性选择符(<code>[attr]...</code>)</li>
<li>连接符包含 <code>space, +, &gt; , ~</code></li>
</ul>
<a id="more"></a>
<h2 id="CSS3-和-CSS-2-1-有什么不同"><a href="#CSS3-和-CSS-2-1-有什么不同" class="headerlink" title="CSS3 和 CSS 2.1 有什么不同"></a>CSS3 和 CSS 2.1 有什么不同</h2><p>1、对于简单选择符的定义不同<br><code>CSS 2.1</code> 定义<strong>简单选择符</strong>为一个类型或通用选择符后跟着0个或多个属性、ID、伪类选择符。</p>
<p>也就是说 <code>p.name</code> 在 <code>CSS2</code> 中是一个简单选择符，而在 <code>CSS3</code> 中则是两个简单选择符连接在一起的一个组</p>
<p>2、引入了更多的伪类选择符<br><code>CSS3</code> 引入了如 <code>nth-child(), :nth-of-type(), :target(), :not()...</code>等丰富的伪类选择符</p>
<p>3、伪元素的写法改为 <code>::</code><br>把 <code>CSS2</code> 中 <code>:first-line</code> 的写法改为了 <code>::first-line</code>，即把伪元素的 <code>:</code> 改为了 <code>::</code>，应该是要和伪类进行区分</p>
<p>4、引入了新的连接符 <code>~</code><br>这是一个通用兄弟选择符，可能是觉得 <code>+</code> 还不够用吧，只能选择直接相邻的兄弟</p>
<h2 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h2><p>分为三种：后代(<code>space</code>)、子元素(<code>&gt;</code>)、相邻兄弟(<code>+</code>)、通用兄弟(<code>~</code>)，例如下面的<a href="http://output.jsbin.com/gaxosubebi/1" target="_blank" rel="external">demo</a>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">p + em &#123;</div><div class="line">  color: #f00;</div><div class="line">&#125;</div><div class="line"></div><div class="line">p ~ p &#123;</div><div class="line">  color: #00f;</div><div class="line">&#125;</div><div class="line"></div><div class="line">div span &#123;</div><div class="line">  background: #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line">div &gt; span &#123;</div><div class="line">  color: #0a0;</div><div class="line">&#125;</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;p&gt;hello paragraph &lt;span&gt;div span &#123;&#125; select me&lt;/span&gt;&lt;/p&gt;</div><div class="line">    &lt;em&gt;p + em &#123;&#125; select me&lt;/em&gt;</div><div class="line">    &lt;p&gt;p ~ p &#123;&#125; select me&lt;/p&gt;</div><div class="line">    &lt;span&gt;div span &#123;&#125; and div &gt; span &#123;&#125; select me&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>相邻兄弟我常用来设置重复区块之间的间隔：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.group</span> + <span class="selector-class">.group</span> &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul>
<li>类：<code>.class</code></li>
<li>ID：<code>#id</code></li>
<li>通用选择符：<code>*</code></li>
<li>类型选择符：<code>p, div, section...</code></li>
<li>属性选择符：<code>[attr], [attr=val], [attr=|val], [attr=~val], [attr=^val], [attr=$val], [attr=*val]</code></li>
<li>伪类<ul>
<li>动态伪类</li>
<li>链接伪类：<code>:link, :visited</code></li>
<li>用户交互：<code>:hover, :active, :focus</code></li>
<li>目标：<code>:target</code></li>
<li>UI：<code>:enabled, :disabled, :checked</code></li>
<li>结构化：<code>:nth-child(), :nth-last-child(), :nth-of-type(), nth-last-of-type(), :only-child, :only-of-type, :empty...</code></li>
<li>:not()</li>
</ul>
</li>
<li>伪元素<ul>
<li><code>::first-line</code></li>
<li><code>::first-letter</code></li>
<li><code>::before/::after</code></li>
</ul>
</li>
</ul>
<h2 id="before-after"><a href="#before-after" class="headerlink" title="::before/::after"></a>::before/::after</h2><p>这两个伪元素功能非常强大，从 <a href="http://a.singlediv.com/" target="_blank" rel="external">a single div</a>这个页面就可见一斑。日常中用它画个三角形、放置一个背景图片都是很常见的：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>个人很喜欢这俩，既不占用额外的 <code>HTML</code> 标签，又能写丰富的样式和动画</p>
<h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><p>我们有这么多的选择符，那如果多个选择符都匹配同一个元素时，该应用哪个呢？规范定义了一组数值 <code>abc</code></p>
<ul>
<li>计算 <code>ID</code> 选择符 的个数，赋值给 <code>a</code></li>
<li>计算 类、属性、伪类 选择符 的个数，赋值给 <code>b</code></li>
<li>计算 类型、伪元素选择符 的个数，赋值给 <code>c</code></li>
<li>忽略通用选择符</li>
<li><code>:not()</code> 不计算，但它里面的选择符还是正常计算</li>
</ul>
<p>下面的例子中 <code>p#footer</code> 的权重最大：</p>
<pre><code>* =&gt; 000
p =&gt; 001
p::before =&gt; 002
p#footer =&gt; 101
p.name =&gt; 011
</code></pre><p>这些是从选择符本身来看的，如果结合样式的来源（开发者、用户、浏览器）以及重要性 (<code>!important</code>)来看，那么一个元素最终的样式规则定义如下：</p>
<ul>
<li>根据来源、重要性排序<ul>
<li>浏览器默认样式</li>
<li>开发者定义的普通样式</li>
<li>用户定义的普通样式</li>
<li>用户定义的重要样式(<code>!important</code>)</li>
<li>开发者定义的重要样式(<code>!important</code>)</li>
</ul>
</li>
<li>相同重要性、来源的再根据选择符本身的权重抉择，越具体权重越大</li>
<li>前面计算的结果都一样的话，后来者居上</li>
</ul>
<p>从上面的定义可以看到虽然用户可以覆盖开发者样式，但是 <code>!important</code> 赋予了开发者更高的权利，从而可以提高页面易访问性，避免用户瞎写导致页面布局错乱</p>
<h2 id="属性值的计算"><a href="#属性值的计算" class="headerlink" title="属性值的计算"></a>属性值的计算</h2><p>一旦用户代理解析完文档并构建了一个文档树，那么就需要为每个元素赋予其相应的属性值如 <code>border, color</code> 等。那么这个属性值是如何计算的呢？根据规范，最终的属性是通过下面4个步骤计算得到的：</p>
<ul>
<li>规范规定的默认值或者在样式文件指定的值，<code>specified value</code></li>
<li>转换为可以被用来继承的值，<code>computed value</code></li>
<li>转换为绝对值如果必要的时候，<code>used value</code></li>
<li>根据实际环境转换为实际值，<code>actual value</code></li>
</ul>
<p><strong>specified value</strong></p>
<p>首先 <code>UA</code> 必须为每一个属性赋予一个值，这个值：</p>
<ol>
<li>如果在样式文件中指定了，那么使用它</li>
<li>否则，如果这个属性是可以继承的且不是根元素，那么使用父元素的 `computed</li>
<li>否则，使用这个属性的初始值（由规范指定）</li>
</ol>
<p>可以认为这一步是先要获取一个默认值（因为每个属性必须有值）</p>
<p><strong>computed value</strong></p>
<p>由第一步得到的属性值，可能是绝对值也可能是相对值。</p>
<p>绝对值即不依赖其他值的值，例如 <code>p{color: red，font-size: 14px;}</code>，这些值不需要计算转换，所以在第二步成为为 <code>computed value</code></p>
<p>对于相对值，例如 <code>width: 20%</code>，必须要有一个参考值(依赖布局才能决定)才可以被计算出来。</p>
<p>还有一些相对值em，如 <code>{font-size: 16px;padding-top: 2em}</code>，就直接转换为 <code>{padding-top: 32px;}</code>，不需要等到第三步</p>
<p><strong>used value</strong></p>
<p><code>css</code> 最终使用的值。<code>computed value</code> 是在不渲染文档最大程度处理的值。</p>
<p>但是有一些值只能在文档被确定布局之后才能决定。例如子元素的宽度设置为其包含块的 <code>20%</code> 等，那么子元素的宽度必须要等到包含块的宽度确定了才能确定。</p>
<p>所以 <code>computed value</code> 与 <code>used value</code> 的区别是：</p>
<ul>
<li>前者是在页面展现之前，仅处理样式时就能得出的尽可能接近绝对的结果；</li>
<li>后者则是页面展示时，得出的绝对值。</li>
</ul>
<p><strong>actual value</strong></p>
<p>原则上，<code>used value</code> 是可以被使用的，但是 <code>UA</code> 可能在一些环境中无法使用这个值，例如 <code>UA</code> 可能只允许渲染整数值的 <code>border</code>，这个时候就需要使用和 <code>used value</code> 接近的值。</p>
<p>这些有什么用？有一个例子是行高的继承，我们知道行高的设置有 数字、百分比、具体值，如果我们要设置一个页面所有内容都是行高为字体的2倍大小，比如：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  font-size: 12px;</div><div class="line">  line-height: 2em;</div><div class="line">  line-height: 200%;</div><div class="line">  line-height: 2;</div><div class="line">&#125;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;p&gt;font-size: 15px&lt;/p&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>哪个是正确的呢？答案是 <code>line-height: 2</code>，根据 <a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height" target="_blank" rel="external">规范</a>：</p>
<blockquote>
<p><code>&lt;length&gt;</code><br>The specified length is used in the calculation of the line box height. Negative values are illegal.<br><code>&lt;number&gt;</code><br>The used value of the property is this number multiplied by the element’s font size. Negative values are illegal. <strong>The computed value is the same as the specified value.</strong><br><code>&lt;percentage&gt;</code><br><strong>The computed value of the property is this percentage multiplied by the element’s computed font size.</strong> Negative values are illegal.</p>
</blockquote>
<h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><ul>
<li><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/selector.html" target="_blank" rel="external">CSS2.1 Selector REC - W3C</a></li>
<li><a href="https://www.w3.org/TR/2011/REC-css3-selectors-20110929/" target="_blank" rel="external">CSS3 Selector REC - W3C</a></li>
<li><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/cascade.html" target="_blank" rel="external">cascade REC - W3C</a></li>
<li><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/generate.html" target="_blank" rel="external">generate text - W3C</a></li>
<li><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height" target="_blank" rel="external">Visual formatting model details - W3C</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是选择符&quot;&gt;&lt;a href=&quot;#什么是选择符&quot; class=&quot;headerlink&quot; title=&quot;什么是选择符&quot;&gt;&lt;/a&gt;什么是选择符&lt;/h2&gt;&lt;p&gt;选择符决定它和文档树中的哪个元素相匹配，其实是模式匹配，这样它所定义的样式就能应用到那个元素上。&lt;/p&gt;
&lt;h2 id=&quot;怎么写&quot;&gt;&lt;a href=&quot;#怎么写&quot; class=&quot;headerlink&quot; title=&quot;怎么写&quot;&gt;&lt;/a&gt;怎么写&lt;/h2&gt;&lt;p&gt;选择符可以简单到只有一个元素名，如 &lt;code&gt;p {}&lt;/code&gt;，也可以复杂到很多选择符组合在一起，如 &lt;code&gt;.header .title {}&lt;/code&gt;。那它是怎么定义的呢？&lt;a href=&quot;https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#selector-syntax&quot;&gt;CSS3&lt;/a&gt; 中定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选择符是一组或多组&lt;strong&gt;简单选择符&lt;/strong&gt;通过连接符组合起来的&lt;/li&gt;
&lt;li&gt;一组简单选择符就是多个&lt;strong&gt;简单选择符&lt;/strong&gt;不是用连接符组合起来的&lt;/li&gt;
&lt;li&gt;简单选择符就是最最基本的选择符，包含 通用选择符(&lt;code&gt;*&lt;/code&gt;)、类型选择符(&lt;code&gt;p, div...&lt;/code&gt;)、类(&lt;code&gt;.header...&lt;/code&gt;)、伪类(&lt;code&gt;:first-child...&lt;/code&gt;)、ID(&lt;code&gt;#footer&lt;/code&gt;…)、属性选择符(&lt;code&gt;[attr]...&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;连接符包含 &lt;code&gt;space, +, &amp;gt; , ~&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="基础知识" scheme="https://atwxp.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>meta 元素的使用</title>
    <link href="https://atwxp.github.io/2017/04/10/meta/"/>
    <id>https://atwxp.github.io/2017/04/10/meta/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T04:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h1><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>设置布局视口为设备宽度，不允许用户缩放，在网页加载时隐藏地址栏与导航栏<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, user-scalable=no, minimal-ui"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>width</code>：<code>layout viewport</code> 的宽度</li>
</ul>
<ul>
<li><code>height</code>：<code>layout viewport</code> 的高度</li>
</ul>
<ul>
<li><code>initial-scale</code>：初始的缩放比例</li>
</ul>
<ul>
<li><code>maximum-scale</code>：允许用户缩放到的最大比例</li>
</ul>
<ul>
<li><code>user-scalable</code>：用户是否可以手动缩放</li>
</ul>
<ul>
<li><code>minimal-ui</code>：<code>iOS 7.1 Safari</code> 为 <code>meta</code> 标签新增 <code>minimal-ui</code> 属性，在网页加载时隐藏地址栏与导航栏</li>
</ul>
<p><strong>PS: iOS 8 中移除了 ‘minimal-ui’</strong></p>
<h3 id="format-detection"><a href="#format-detection" class="headerlink" title="format-detection"></a>format-detection</h3><p><code>iPhone</code> 下会自动将一连串数字转换为拨号超链接，<code>email</code>则会调起邮件系统，去掉自动识别：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- or --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no, email=no"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="apple-touch-icon"><a href="#apple-touch-icon" class="headerlink" title="apple-touch-icon"></a>apple-touch-icon</h3><p>设置 <code>apple-touch-icon</code> 属性，在 <code>safari</code> 上可以使用 <strong>添加到主屏幕</strong> 将页面添加到主屏幕上，方便用户以后快速访问<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"120*120"</span> <span class="attr">href</span>=<span class="string">"/your-icon.png"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>sizes</code> 适配不同的设备，没有设置的话，默认大小为 <code>60 * 60</code></p>
<ul>
<li><p><code>180 * 180</code>：<code>iphone6@3x</code></p>
</li>
<li><p><code>76  * 76</code>：<code>ipad 2 and ipad mini (@1x)</code></p>
</li>
<li><p><code>120 * 120</code>：<code>iphone4, 5, 6@2x</code></p>
</li>
<li><p><code>152 * 152</code>：<code>ipad and ipad mni (@2x)</code></p>
</li>
</ul>
<p>图标搜索的优先级如下:</p>
<ul>
<li>没有和相应设备推荐尺寸一致的图标，优先使用比推荐尺寸大，但是最接近推荐尺寸的图标</li>
<li>如果没有比推荐尺寸大的图标， 选择尺寸最大的图标</li>
<li>如果link标签没有指定图标，则在根目录寻找以 <code>apple-touch-icon...</code> 为前缀命名的图标</li>
</ul>
<p>PS：<code>IOS7</code> 开始设备图标的推荐尺寸变化了：</p>
<pre><code>default: 57 * 57 =&gt; 60 * 60

iphone retina: 114 * 114 =&gt; 120 * 120

ipad retina: 144 * 144 =&gt; 152 * 152

ipad with no retina: 72 * 72 =&gt; 76 * 76
</code></pre><p>总结下来：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- For Chrome for Android: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">sizes</span>=<span class="string">"192x192"</span> <span class="attr">href</span>=<span class="string">"touch-icon-192x192.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For iPhone 6 Plus with @3× display: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"180x180"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-180x180-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For iPad with @2× display running iOS ≥ 7: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"152x152"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-152x152-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For iPad with @2× display running iOS ≤ 6: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-144x144-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For iPhone with @2× display running iOS ≥ 7: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"120x120"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-120x120-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For iPhone with @2× display running iOS ≤ 6: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-114x114-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For the iPad mini and the first- and second-generation iPad (@1× display) on iOS ≥ 7: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"76x76"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-76x76-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For the iPad mini and the first- and second-generation iPad (@1× display) on iOS ≤ 6: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"72x72"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-72x72-precomposed.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- For non-Retina iPhone, iPod Touch, and Android 2.1+ devices: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"apple-touch-icon-precomposed.png"</span>&gt;</span><span class="comment">&lt;!-- 57×57px --&gt;</span></div></pre></td></tr></table></figure></p>
<p>上面的代码我们使用了 <code>app-touch-icon-precomposed</code> 属性，和 <code>app-touch-icon</code> 的区别在于：<strong>前者添加的是设计原图，不带有高光渐变效果，后者则是会带有 <code>IOS</code> 统一的高光效果</strong></p>
<p>PS：判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">navigator.standalone</div></pre></td></tr></table></figure>
<h3 id="app-touch-startup-image"><a href="#app-touch-startup-image" class="headerlink" title="app-touch-startup-image"></a>app-touch-startup-image</h3><p>前面我们成功的添加页面到主屏幕上，然后我们还可以设置 <code>app-touch-startup-image</code>，即一个类似 <code>NativeApp</code> 的启动画面。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"startup-image.png"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><code>iphone3, 4, 5, 6</code>只支持<code>竖屏模式</code>，而 <code>iPhone 6 Plus</code> 支持横屏，<code>iPad</code>有横屏竖屏。</p>
<p><code>Apple</code> 官方文档建议竖屏模式的 <code>iPhone 3， 4</code> 启动动画的大小 <code>320 * 460</code>，之所以少了 <code>20px</code>，我们很容易想到是 <code>IOS</code> 状态栏的高度大小。对于 <code>retina</code> 屏幕，我们需要准备 <code>640 * 920</code> 大小的图片。不同于 <code>app-touch-icon</code>，启动画面没有<code>sizes</code>属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- iPhone --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 320px)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-320x460.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone (Retina) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 320px) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-640x920.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone 5 (Retina) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 320px) and (device-width: 568px) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-640x1096.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone 6 (retina) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 375px) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-750x1294.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone 6+ (portrait )--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 414px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1242x2148.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPhone 6+ (landscape) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 414px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1182x2208.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad (portrait) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: portrait)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-768x1004.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad (landscape) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: landscape)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-748x1024.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad (Retina, portrait) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: portrait) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1536x2008.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- iPad (Retina, landscape) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">media</span>=<span class="string">"(device-width: 768px) and (orientation: landscape) and (-webkit-device-pixel-ratio: 2)"</span> <span class="attr">href</span>=<span class="string">"apple-touch-startup-image-1496x2048.png"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="apple-mobile-web-app-capable"><a href="#apple-mobile-web-app-capable" class="headerlink" title="apple-mobile-web-app-capable"></a>apple-mobile-web-app-capable</h3><p>删除默认的 <code>IOS</code> 工具栏和菜单栏式，即开启 <code>webapp</code> 全屏模式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>PS：当页面添加到主屏幕后再点击进行启动时有效，从浏览器跳转或输入链接进入并没有此效果</p>
<h3 id="apple-mobile-web-app-status-bar-style"><a href="#apple-mobile-web-app-status-bar-style" class="headerlink" title="apple-mobile-web-app-status-bar-style"></a>apple-mobile-web-app-status-bar-style</h3><p>设置 <code>IOS</code> 系统状态栏风格<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black-translucent"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- or --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p><code>content</code> 参数的值：</p>
<ul>
<li><p><code>default</code>：默认值白色</p>
</li>
<li><p><code>black</code>：黑色</p>
</li>
<li><p><code>black-translucent</code>：半透明</p>
</li>
</ul>
<p>如果设置为 <code>default</code> 或者 <code>black</code>，页面内容从状态栏底部开始；如果设置为 <code>black-translucent</code>，页面内容充满整个屏幕，所以页面内容会被状态栏遮挡。</p>
<p><img src="/assets/img/statusbar-black.png" alt="Alt text"> <img src="/assets/img/statusbar-blacktrans.png" alt="Alt text"></p>
<p>PS：只有在 <code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</code>时生效</p>
<h3 id="添加到主屏后的标题"><a href="#添加到主屏后的标题" class="headerlink" title="添加到主屏后的标题"></a>添加到主屏后的标题</h3><pre><code>&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;百度糯米&quot;&gt;
</code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1、IOS上长按<code>链接</code>或者<code>图片</code>会默认弹出系统菜单，<code>-webkit-touch-callout</code> 可以禁止这个菜单的弹出（菜单默认是开启的），安卓不起作用<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span>,</div><div class="line"><span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">-webkit-touch-callout</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、禁止选择文本（如果没有选择文本需要，建议最好加上）<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>,</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">-webkit-user-select</span>: none;</div><div class="line">    <span class="attribute">-moz-user-select</span>: none;</div><div class="line">    <span class="attribute">-ms-user-select</span>: none;</div><div class="line">    <span class="attribute">user-select</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、避免屏幕旋转导致字体大小缩放<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、更改<code>IOS</code> 可点击元素的高亮颜色：当透明度设为0，则会禁用此属性；当透明度设为1，元素在点击时不可见；除了<code>iOS Safari</code>，大部分 <code>Android</code> 手机也是支持的</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">-webkit-tap-highlight-color</span>: rba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、隐藏地址栏</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>6、开启电话、短信功能</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 电话</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:10086"</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">// 短信</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:10086"</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line">// 邮箱</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:example@gmai.com"</span>&gt;</span>example@gmail.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>7、判断屏幕方向<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">switch</span> (<span class="built_in">window</span>.orientation) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">-90</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">90</span>:</div><div class="line">        alert(<span class="string">'横屏:'</span> + <span class="built_in">window</span>.orientation)</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">180</span>:</div><div class="line">        alert(<span class="string">'竖屏:'</span> + <span class="built_in">window</span>.orientation)</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>8、关闭 <code>IOS</code> 输入框首字母大写</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocapitalize</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>9、关闭 <code>IOS</code> 输入自动修正</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocorrect</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>10、-webkit-appearance</p>
<blockquote>
<p> display an element using a platform-native styling based on the operating system’s theme.</p>
</blockquote>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Partial list of available values in Gecko */</span></div><div class="line"><span class="attribute">-moz-appearance</span>: none;</div><div class="line"><span class="attribute">-moz-appearance</span>: button;</div><div class="line"><span class="attribute">-moz-appearance</span>: checkbox;</div><div class="line"><span class="attribute">-moz-appearance</span>: scrollbarbutton-up;</div><div class="line"></div><div class="line"><span class="comment">/* Partial list of available values in WebKit/Blink */</span></div><div class="line"><span class="attribute">-webkit-appearance</span>: none;</div><div class="line"><span class="attribute">-webkit-appearance</span>: button;</div><div class="line"><span class="attribute">-webkit-appearance</span>: checkbox;</div><div class="line"><span class="attribute">-webkit-appearance</span>: scrollbarbutton-up;</div></pre></td></tr></table></figure>
<p>通常我们使用  <code>none</code> 重置表单外观</p>
<p>11、修改 placeholder 文字颜色</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* firefox 18- */</span></div><div class="line"><span class="selector-pseudo">:-moz-input-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* firefox 19+ */</span></div><div class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* ie 10+ */</span></div><div class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#f00</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><ul>
<li><a href="https://github.com/joshbuchea/HEAD" target="_blank" rel="external"><code>&lt;head&gt;</code> Cheat Sheet</a></li>
<li><a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="external">specifying a webpage icon for web clip</a></li>
<li><a href="https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html" target="_blank" rel="external">Meta Tags</a></li>
<li><a href="https://mathiasbynens.be/notes/touch-icons" target="_blank" rel="external">Everything you always wanted to know about touch icons</a></li>
<li><a href="http://taylor.fausak.me/2012/03/27/ios-web-app-icons-and-startup-images/" target="_blank" rel="external">ios-web-app-icons-and-startup-images/</a></li>
<li><a href="http://www.motype.org/post/design/apple-touch-startup-image" target="_blank" rel="external">WebApp化（二）apple-touch-startup-image</a></li>
<li><a href="http://www.html-js.com/article/2983" target="_blank" rel="external">移动Web开发技巧汇总</a></li>
<li><a href="http://stackoverflow.com/questions/2997437/what-size-should-apple-touch-icon-png-be-for-ipad-and-iphone-4" target="_blank" rel="external">what-size-should-apple-touch-icon-png-be-for-ipad-and-iphone-4</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;meta-标签&quot;&gt;&lt;a href=&quot;#meta-标签&quot; class=&quot;headerlink&quot; title=&quot;meta 标签&quot;&gt;&lt;/a&gt;meta 标签&lt;/h1&gt;&lt;h3 id=&quot;viewport&quot;&gt;&lt;a href=&quot;#viewport&quot; class=&quot;headerlink&quot; title=&quot;viewport&quot;&gt;&lt;/a&gt;viewport&lt;/h3&gt;&lt;p&gt;设置布局视口为设备宽度，不允许用户缩放，在网页加载时隐藏地址栏与导航栏&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1, user-scalable=no, minimal-ui&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt;：&lt;code&gt;layout viewport&lt;/code&gt; 的宽度&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt;：&lt;code&gt;layout viewport&lt;/code&gt; 的高度&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;initial-scale&lt;/code&gt;：初始的缩放比例&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;maximum-scale&lt;/code&gt;：允许用户缩放到的最大比例&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user-scalable&lt;/code&gt;：用户是否可以手动缩放&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;minimal-ui&lt;/code&gt;：&lt;code&gt;iOS 7.1 Safari&lt;/code&gt; 为 &lt;code&gt;meta&lt;/code&gt; 标签新增 &lt;code&gt;minimal-ui&lt;/code&gt; 属性，在网页加载时隐藏地址栏与导航栏&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS: iOS 8 中移除了 ‘minimal-ui’&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;format-detection&quot;&gt;&lt;a href=&quot;#format-detection&quot; class=&quot;headerlink&quot; title=&quot;format-detection&quot;&gt;&lt;/a&gt;format-detection&lt;/h3&gt;&lt;p&gt;&lt;code&gt;iPhone&lt;/code&gt; 下会自动将一连串数字转换为拨号超链接，&lt;code&gt;email&lt;/code&gt;则会调起邮件系统，去掉自动识别：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;telephone=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- or --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;format-detection&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;telephone=no, email=no&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础知识" scheme="https://atwxp.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>touchend不触发bug</title>
    <link href="https://atwxp.github.io/2017/04/10/touched-not-trigger/"/>
    <id>https://atwxp.github.io/2017/04/10/touched-not-trigger/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>给一个元素绑定 <code>touchstart, touchmove, touchend, click</code></p>
<p>如果只是触摸一下这个元素，按理是只触发 <code>touchstart touchend click</code>，如果滚动的话，应该就是多了一个 <code>touchmove</code> 而已</p>
<p>但是安卓机的某些浏览器（如 <code>UC</code>）在滚动的时候不会触发 <code>touchend</code>（偶尔也会触发），<code>touchmove</code> 可能也只是触发一次，见 <a href="http://output.jsbin.com/cuqedenofa" target="_blank" rel="external">demo</a></p>
<p>解决方法：</p>
<ul>
<li>在 <code>touchstart</code> 设置 <code>e.preventDefault()</code>，页面不能滚动，链接不能跳转，不会触发 <code>click</code> 事件</li>
<li>在 <code>touchmove</code> 设置 <code>e.preventDefault()</code>，页面不能滚动以及不能 <code>pinch-room</code></li>
</ul>
<p>参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Touch_events#Additional_tips" target="_blank" rel="external">Touch_events - MDN</a></p>
<blockquote>
<p>Since calling preventDefault() on a touchstart or the first touchmove event of a series prevents the corresponding mouse events from firing, it’s common to call preventDefault() ontouchmove rather than touchstart. That way, mouse events can still fire and things like links will continue to work.</p>
</blockquote>
<p>参考 <a href="http://www.quirksmode.org/mobile/default.html" target="_blank" rel="external">Preventing the touch default</a></p>
<blockquote>
<p>The default of all actions is prevented when you return false (or call preventDefault()) ontouchstart. The touchmove event is trickier: only scroll and pinch-zoom are prevented when you return false on that event.</p>
</blockquote>
<h2 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h2><ul>
<li><a href="https://www.douban.com/note/425950082/" target="_blank" rel="external">如何修复移动浏览器上 touchend 事件不触发的bug</a></li>
</ul>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给一个元素绑定 &lt;code&gt;touchstart, touchmove, touchend, click&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果只是触摸一下这个元素，按理是只触发 &lt;code&gt;touchstart touchend click&lt;/code&gt;，如果滚动的话，应该就是
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>反广告过滤</title>
    <link href="https://atwxp.github.io/2017/04/10/ad/"/>
    <id>https://atwxp.github.io/2017/04/10/ad/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p> <code>dom</code>  的类名中存在某些关键词会被一些浏览器（猎豹，qq，UC…）的广告过滤机制干掉</p>
<p>已知的会被过滤掉的关键字：</p>
<ul>
<li>banner</li>
<li>ad</li>
<li>poster</li>
<li>flag</li>
<li>block</li>
<li>download</li>
<li>na-download</li>
</ul>
<p>包括 <code>HTML</code> 中的 <code>&lt;img /&gt;</code> 的资源路径可能也会被过滤了，有次我把图片命名为 <code>ad.jpg</code> 就被过滤了。。</p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;code&gt;dom&lt;/code&gt;  的类名中存在某些关键词会被一些浏览器（猎豹，qq，UC…）的广告过滤机制干掉&lt;/p&gt;
&lt;p&gt;已知的会被过滤掉的关键字：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;banner&lt;/li&gt;
&lt;li&gt;ad&lt;/li&gt;
&lt;li&gt;poster&lt;/li&gt;
&lt;li&gt;f
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>UC下字体突然变大</title>
    <link href="https://atwxp.github.io/2017/04/10/uc-font-scale/"/>
    <id>https://atwxp.github.io/2017/04/10/uc-font-scale/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目中遇到了页面的字体在 <code>UC</code> 变大的问题，后来排查是一个地方的 <code>font-size: 12px</code> 导致的，临时方案就是换了字体大小解决了问题</p>
<p>后来其他同事又遇到了这个问题，这不得不重视起来，于是在 <a href="https://www.zhihu.com/question/29769089" target="_blank" rel="external">知乎</a> 上找到了答案</p>
<blockquote>
<p>uc浏览器判断到页面上文字居多时，会自动放大字体优化移动用户体验</p>
</blockquote>
<p>解决方法是在头部加上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"wap-font-scale"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>尝试了其他方法也是可以的，如改变字体大小，把样式表放在最后加载等</p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目中遇到了页面的字体在 &lt;code&gt;UC&lt;/code&gt; 变大的问题，后来排查是一个地方的 &lt;code&gt;font-size: 12px&lt;/code&gt; 导致的，临时方案就是换了字体大小解决了问题&lt;/p&gt;
&lt;p&gt;后来其他同事又遇到了这个问题，这不得不重视起来，于是在 &lt;a hr
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="开发经验" scheme="https://atwxp.github.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>UA检测</title>
    <link href="https://atwxp.github.io/2017/04/10/ua/"/>
    <id>https://atwxp.github.io/2017/04/10/ua/</id>
    <published>2017-04-10T03:39:49.000Z</published>
    <updated>2017-04-10T03:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、平台检测"><a href="#1、平台检测" class="headerlink" title="1、平台检测"></a>1、平台检测</h2><p>安卓<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> android = ua.match(<span class="regexp">/(Android)\s([\d.]+)/</span>);</div></pre></td></tr></table></figure></p>
<p>IOS<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ios = ua.match(<span class="regexp">/iPhone|iPad|iPod/</span>);</div><div class="line"><span class="keyword">var</span> ipad = ua.match(<span class="regexp">/(iPad).*OS\s([\d_]+)/</span>);</div><div class="line"><span class="keyword">var</span> ipod = ua.match(<span class="regexp">/(iPod).*OS\s([\d_]+)/</span>);</div><div class="line"><span class="keyword">var</span> iphone = !ipad &amp;&amp; ua.match(<span class="regexp">/(iPhone)\sOS\s([\d_]+)/</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="2、浏览器检测"><a href="#2、浏览器检测" class="headerlink" title="2、浏览器检测"></a>2、浏览器检测</h2><p>Chrome<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// chrome for ios use CriOS/ instead of Version/</span></div><div class="line"><span class="keyword">var</span> chrome = ua.match(<span class="regexp">/(Chrome)\/([\d.]+)/</span>) || ua.match(<span class="regexp">/(CriOS)\/([\d.]+)/</span>);</div></pre></td></tr></table></figure></p>
<p>Safari<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ios = ua.match(<span class="regexp">/iPhone|iPad|iPod/</span>);</div><div class="line"><span class="keyword">var</span> safari = ios &amp;&amp; ua.match(<span class="regexp">/Version\/([\d.]+)([^S]*(Safari)|[^M]*Mobile[^S]*(Safari))/</span>);</div></pre></td></tr></table></figure></p>
<p>UC<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uc = ua.match(<span class="regexp">/(UCBrowser)\/([\d.]+)/</span>);</div></pre></td></tr></table></figure></p>
<p>QQ<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> qq = ua.match(<span class="regexp">/(MQQBrowser)\/([\d.]+)/</span>)</div></pre></td></tr></table></figure></p>
<p>微信<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> wechat = ua.match(<span class="regexp">/(MicroMessenger)\/([\d._]+)/</span>);</div></pre></td></tr></table></figure></p>
<p>QQIM<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// QQ聊天工具内置的浏览器, 安卓既有 MQQBrowser又有 QQ/5.8.0，IOS只有 QQ/5.8.0</span></div><div class="line"><span class="keyword">var</span> qqim = ua.match(<span class="regexp">/(QQ)\/([\d.]+)/</span>) || ua.match(<span class="regexp">/(MQQBrowser)\/([\d.]+)/</span>);</div></pre></td></tr></table></figure></p>
<p>百度浏览器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bdbox = ua.match(<span class="regexp">/baiduboxapp/</span>);</div></pre></td></tr></table></figure></p>
<p>手百<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> baidubrowser = ua.match(<span class="regexp">/baidubrowser\/([\d\.]*)/</span>);</div></pre></td></tr></table></figure></p>
<p>End.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、平台检测&quot;&gt;&lt;a href=&quot;#1、平台检测&quot; class=&quot;headerlink&quot; title=&quot;1、平台检测&quot;&gt;&lt;/a&gt;1、平台检测&lt;/h2&gt;&lt;p&gt;安卓&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; android = ua.match(&lt;span class=&quot;regexp&quot;&gt;/(Android)\s([\d.]+)/&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;IOS&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ios = ua.match(&lt;span class=&quot;regexp&quot;&gt;/iPhone|iPad|iPod/&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ipad = ua.match(&lt;span class=&quot;regexp&quot;&gt;/(iPad).*OS\s([\d_]+)/&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ipod = ua.match(&lt;span class=&quot;regexp&quot;&gt;/(iPod).*OS\s([\d_]+)/&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; iphone = !ipad &amp;amp;&amp;amp; ua.match(&lt;span class=&quot;regexp&quot;&gt;/(iPhone)\sOS\s([\d_]+)/&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="FrontEnd" scheme="https://atwxp.github.io/categories/FrontEnd/"/>
    
    
      <category term="移动web开发" scheme="https://atwxp.github.io/tags/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    
      <category term="基础知识" scheme="https://atwxp.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
</feed>
